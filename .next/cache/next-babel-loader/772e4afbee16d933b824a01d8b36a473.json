{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\forms\\\\IMANewSaleForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport IMAInputs from \"IMAInputs\";\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nfunction submitNewSale(productList, values) {\n  var totalPrice = 0;\n  var existingProductQty = 0;\n  var productPrice = 0;\n  values.quantities.forEach(function (product, index) {\n    var p = getProductFromProductList(productList, product.name);\n    productPrice = p.price;\n    existingProductQty = p.qty;\n    product.price = productPrice;\n    totalPrice += product.price * product.qty;\n  }, values.quantities);\n  values.totalPrice = totalPrice;\n  values.date = moment(values.date).add(1, 'minutes').toDate();\n  insertSaleIntoSales(values); //check if customer already exists by Name. if not add new with email if exists.\n\n  values['quantities'].forEach(function (product, index) {\n    updateProductInInventory(product['name'], existingProductQty - product['qty'], productPrice);\n  });\n}\n\nfunction getProductFromProductList(productList, productName) {\n  var ret = null;\n  productList.forEach(function (product, index) {\n    if (product.name === productName) {\n      ret = product;\n    }\n  });\n  return ret;\n}\n\nvar updateProductInInventory = function updateProductInInventory(name, qty, productPrice) {\n  var res;\n  return _regeneratorRuntime.async(function updateProductInInventory$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/inventoryUpdate', {\n            method: 'post',\n            body: _JSON$stringify({\n              name: name,\n              qty: qty,\n              price: productPrice\n            })\n          }));\n\n        case 2:\n          res = _context.sent;\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar insertSaleIntoSales = function insertSaleIntoSales(sale) {\n  var rest;\n  return _regeneratorRuntime.async(function insertSaleIntoSales$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/sales', {\n            method: 'post',\n            body: _JSON$stringify(sale)\n          }));\n\n        case 2:\n          rest = _context2.sent;\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\n\nvar IMANewSaleForm = function IMANewSaleForm(props) {\n  console.log(_JSON$stringify(props.productList.map(function (val, index) {\n    return {\n      name: val.name\n    };\n  })));\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Add New Sale\"), __jsx(Formik, {\n    initialValues: {\n      customerName: \"\",\n      date: \"\",\n      customerEmail: \"\",\n      quantities: [{}] // added for our select\n\n    },\n    validationSchema: Yup.object({\n      customerName: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n      date: Yup.date().required(\"Required\"),\n      customerEmail: Yup.string().email(\"Invalid email address\"),\n      quantities: Yup.array().of(Yup.object().shape({\n        name: Yup.string().required('Required'),\n        qty: Yup.number().min(0, 'Must be atleast 1').required('Required')\n      })).required('Must have products sold').min(1, 'Minimum of 1 product')\n    }),\n    onSubmit: function onSubmit(values, _ref) {\n      var setSubmitting = _ref.setSubmitting,\n          resetForm = _ref.resetForm;\n      console.log(\"new sale submitted\" + _JSON$stringify(values));\n      resetForm({});\n      setTimeout(function () {\n        submitNewSale(props.productList, values);\n        alert(_JSON$stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, function (_ref2) {\n    var values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        handleReset = _ref2.handleReset,\n        setFieldValue = _ref2.setFieldValue;\n    return __jsx(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, __jsx(IMAInputs.MyTextInput, {\n      label: \"Customer Name\",\n      name: \"customerName\",\n      type: \"text\",\n      placeholder: \"John Doe\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), __jsx(MyDateInput, {\n      label: \"Date of Sale\",\n      name: \"date\",\n      type: \"date\",\n      placeholder: moment(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), __jsx(MyTextInput, {\n      label: \"Customer Email Address\",\n      name: \"customerEmail\",\n      type: \"email\",\n      placeholder: \"jane@doe.com\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Add Products Bought\"), __jsx(FieldArray, {\n      name: \"quantities\",\n      render: function render(arrayHelpers) {\n        return __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, values.quantities.length > 0 && values.quantities.map(function (product, index) {\n          return __jsx(\"div\", {\n            className: \"row\",\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }, __jsx(\"div\", {\n            className: \"col\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, __jsx(\"label\", {\n            htmlFor: \"quantities.\".concat(index, \".name\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          }, \"Name\"), __jsx(MySelect, {\n            label: \"Product Name\",\n            name: \"quantities.\".concat(index, \".name\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131\n            },\n            __self: this\n          }, __jsx(\"option\", {\n            selected: \"selected\",\n            value: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          }, \"Select a product\"), props.productList.map(function (product) {\n            return __jsx(\"option\", {\n              key: product.name,\n              value: product.name,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133\n              },\n              __self: this\n            }, product.name + \" ($\" + product.price + \")\");\n          }))), __jsx(\"div\", {\n            className: \"col\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, __jsx(\"label\", {\n            htmlFor: \"quantities.\".concat(index, \".qty\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138\n            },\n            __self: this\n          }, \" Quantity\"), __jsx(MyTextInput, {\n            name: \"quantities.\".concat(index, \".qty\"),\n            placeholder: \"99999\",\n            type: \"number\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            },\n            __self: this\n          })), __jsx(\"div\", {\n            className: \"col\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145\n            },\n            __self: this\n          }, __jsx(\"button\", {\n            className: \"secondary\",\n            type: \"remove\",\n            onClick: function onClick() {\n              return arrayHelpers.remove(index);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146\n            },\n            __self: this\n          }, \"X\")));\n        }), __jsx(\"button\", {\n          type: \"add\",\n          className: \"secondary\",\n          onClick: function onClick() {\n            return arrayHelpers.push({\n              name: \"\",\n              qty: \"\"\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, \"Add Product\"));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Submit\"));\n  }));\n};\n\nexport default IMANewSaleForm;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/forms/IMANewSaleForm.js"],"names":["Formik","Form","useField","FieldArray","Yup","IMAInputs","moment","require","format","submitNewSale","productList","values","totalPrice","existingProductQty","productPrice","quantities","forEach","product","index","p","getProductFromProductList","name","price","qty","date","add","toDate","insertSaleIntoSales","updateProductInInventory","productName","ret","fetch","method","body","res","sale","rest","IMANewSaleForm","props","console","log","map","val","customerName","customerEmail","object","string","max","required","email","array","of","shape","number","min","setSubmitting","resetForm","setTimeout","alert","errors","touched","handleReset","setFieldValue","arrayHelpers","length","remove","push"],"mappings":";;;;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,UAAjC,QAAmD,QAAnD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACAD,MAAM,GAAGE,MAAT,CAAgB,GAAhB;;AAIA,SAASC,aAAT,CAAuBC,WAAvB,EAAoCC,MAApC,EAA4C;AAC1C,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,kBAAkB,GAAG,CAAzB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACAH,EAAAA,MAAM,CAACI,UAAP,CAAkBC,OAAlB,CAA0B,UAACC,OAAD,EAAUC,KAAV,EAAmB;AAC3C,QAAIC,CAAC,GAAGC,yBAAyB,CAACV,WAAD,EAAcO,OAAO,CAACI,IAAtB,CAAjC;AACAP,IAAAA,YAAY,GAAGK,CAAC,CAACG,KAAjB;AACAT,IAAAA,kBAAkB,GAAGM,CAAC,CAACI,GAAvB;AACAN,IAAAA,OAAO,CAACK,KAAR,GAAgBR,YAAhB;AACAF,IAAAA,UAAU,IAAIK,OAAO,CAACK,KAAR,GAAgBL,OAAO,CAACM,GAAtC;AACD,GAND,EAMGZ,MAAM,CAACI,UANV;AAOAJ,EAAAA,MAAM,CAACC,UAAP,GAAoBA,UAApB;AACAD,EAAAA,MAAM,CAACa,IAAP,GAAclB,MAAM,CAACK,MAAM,CAACa,IAAR,CAAN,CAAoBC,GAApB,CAAwB,CAAxB,EAA2B,SAA3B,EAAsCC,MAAtC,EAAd;AACAC,EAAAA,mBAAmB,CAAChB,MAAD,CAAnB,CAb0C,CAc1C;;AACAA,EAAAA,MAAM,CAAC,YAAD,CAAN,CAAqBK,OAArB,CAA6B,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAC/CU,IAAAA,wBAAwB,CAACX,OAAO,CAAC,MAAD,CAAR,EAAkBJ,kBAAkB,GAAGI,OAAO,CAAC,KAAD,CAA9C,EAAuDH,YAAvD,CAAxB;AACD,GAFD;AAGD;;AAED,SAASM,yBAAT,CAAmCV,WAAnC,EAAgDmB,WAAhD,EAA6D;AAC3D,MAAIC,GAAG,GAAG,IAAV;AACApB,EAAAA,WAAW,CAACM,OAAZ,CAAoB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACtC,QAAGD,OAAO,CAACI,IAAR,KAAiBQ,WAApB,EAAiC;AAC/BC,MAAAA,GAAG,GAAGb,OAAN;AACD;AACF,GAJD;AAKA,SAAOa,GAAP;AACD;;AAED,IAAMF,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAOP,IAAP,EAAaE,GAAb,EAAkBT,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACbiB,KAAK,CAAC,2CAAD,EAA8C;AACnEC,YAAAA,MAAM,EAAE,MAD2D;AAEnEC,YAAAA,IAAI,EAAE,gBAAe;AAAEZ,cAAAA,IAAI,EAAEA,IAAR;AAAcE,cAAAA,GAAG,EAAEA,GAAnB;AAAwBD,cAAAA,KAAK,EAACR;AAA9B,aAAf;AAF6D,WAA9C,CADQ;;AAAA;AACzBoB,UAAAA,GADyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC;;AAOA,IAAMP,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAOQ,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACPJ,KAAK,CAAC,iCAAD,EAAoC;AAC1DC,YAAAA,MAAM,EAAC,MADmD;AAE1DC,YAAAA,IAAI,EAAE,gBAAeE,IAAf;AAFoD,WAApC,CADE;;AAAA;AACpBC,UAAAA,IADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AAQA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAeF,KAAK,CAAC5B,WAAN,CAAkB+B,GAAlB,CACzB,UAAUC,GAAV,EAAexB,KAAf,EAAsB;AACpB,WAAO;AAAEG,MAAAA,IAAI,EAAEqB,GAAG,CAACrB;AAAZ,KAAP;AACD,GAHwB,CAAf,CAAZ;AAIA,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbsB,MAAAA,YAAY,EAAE,EADD;AAEbnB,MAAAA,IAAI,EAAE,EAFO;AAGboB,MAAAA,aAAa,EAAE,EAHF;AAIb7B,MAAAA,UAAU,EAAE,CAAC,EAAD,CAJC,CAII;;AAJJ,KADjB;AAOE,IAAA,gBAAgB,EAAEX,GAAG,CAACyC,MAAJ,CAAW;AAC3BF,MAAAA,YAAY,EAAEvC,GAAG,CAAC0C,MAAJ,GACXC,GADW,CACP,EADO,EACH,+BADG,EAEXC,QAFW,CAEF,UAFE,CADa;AAI3BxB,MAAAA,IAAI,EAAEpB,GAAG,CAACoB,IAAJ,GACHwB,QADG,CACM,UADN,CAJqB;AAM3BJ,MAAAA,aAAa,EAAExC,GAAG,CAAC0C,MAAJ,GACZG,KADY,CACN,uBADM,CANY;AAQ3BlC,MAAAA,UAAU,EAAEX,GAAG,CAAC8C,KAAJ,GACTC,EADS,CAER/C,GAAG,CAACyC,MAAJ,GAAaO,KAAb,CAAmB;AACjB/B,QAAAA,IAAI,EAAEjB,GAAG,CAAC0C,MAAJ,GACHE,QADG,CACM,UADN,CADW;AAGjBzB,QAAAA,GAAG,EAAEnB,GAAG,CAACiD,MAAJ,GACFC,GADE,CACE,CADF,EACK,mBADL,EAEFN,QAFE,CAEO,UAFP;AAHY,OAAnB,CAFQ,EASRA,QATQ,CASC,yBATD,EAUTM,GAVS,CAUL,CAVK,EAUF,sBAVE;AARe,KAAX,CAPpB;AA2BE,IAAA,QAAQ,EAAE,kBAAC3C,MAAD,QAA0C;AAAA,UAA/B4C,aAA+B,QAA/BA,aAA+B;AAAA,UAAhBC,SAAgB,QAAhBA,SAAgB;AAClDjB,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuB,gBAAe7B,MAAf,CAAnC;AACA6C,MAAAA,SAAS,CAAC,EAAD,CAAT;AACAC,MAAAA,UAAU,CAAC,YAAM;AACfhD,QAAAA,aAAa,CAAC6B,KAAK,CAAC5B,WAAP,EAAoBC,MAApB,CAAb;AACA+C,QAAAA,KAAK,CAAC,gBAAe/C,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACA4C,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD,OAJS,EAIP,GAJO,CAAV;AAKD,KAnCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqCG,iBAA6D;AAAA,QAA1D5C,MAA0D,SAA1DA,MAA0D;AAAA,QAAlDgD,MAAkD,SAAlDA,MAAkD;AAAA,QAA1CC,OAA0C,SAA1CA,OAA0C;AAAA,QAAjCC,WAAiC,SAAjCA,WAAiC;AAAA,QAApBC,aAAoB,SAApBA,aAAoB;AAC5D,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD,CAAW,WAAX;AACE,MAAA,KAAK,EAAC,eADR;AAEE,MAAA,IAAI,EAAC,cAFP;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,WAAW,EAAC,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,MAAC,WAAD;AACE,MAAA,KAAK,EAAC,cADR;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,WAAW,EAAExD,MAAM,EAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAaE,MAAC,WAAD;AACE,MAAA,KAAK,EAAC,wBADR;AAEE,MAAA,IAAI,EAAC,eAFP;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,WAAW,EAAC,cAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAnBF,EAoBE,MAAC,UAAD;AACE,MAAA,IAAI,EAAC,YADP;AAEE,MAAA,MAAM,EAAE,gBAAAyD,YAAY;AAAA,eAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGpD,MAAM,CAACI,UAAP,CAAkBiD,MAAlB,GAA2B,CAA3B,IACCrD,MAAM,CAACI,UAAP,CAAkB0B,GAAlB,CAAsB,UAACxB,OAAD,EAAUC,KAAV;AAAA,iBACpB;AAAK,YAAA,SAAS,EAAC,KAAf;AAAqB,YAAA,GAAG,EAAEA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAO,YAAA,OAAO,uBAAgBA,KAAhB,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,MAAC,QAAD;AAAU,YAAA,KAAK,EAAC,cAAhB;AAA+B,YAAA,IAAI,uBAAgBA,KAAhB,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAQ,YAAA,QAAQ,EAAC,UAAjB;AAA4B,YAAA,KAAK,EAAC,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEGoB,KAAK,CAAC5B,WAAN,CAAkB+B,GAAlB,CAAsB,UAAAxB,OAAO;AAAA,mBAAI;AAAQ,cAAA,GAAG,EAAEA,OAAO,CAACI,IAArB;AAA2B,cAAA,KAAK,EAAEJ,OAAO,CAACI,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAiDJ,OAAO,CAACI,IAAR,GAAe,KAAf,GAAsBJ,OAAO,CAACK,KAA9B,GAAqC,GAAtF,CAAJ;AAAA,WAA7B,CAFH,CAFF,CADF,EASE;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAO,YAAA,OAAO,uBAAgBJ,KAAhB,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,MAAC,WAAD;AACE,YAAA,IAAI,uBAAgBA,KAAhB,SADN;AAEE,YAAA,WAAW,EAAC,OAFd;AAGE,YAAA,IAAI,EAAC,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CATF,EAiBE;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AACE,YAAA,SAAS,EAAC,WADZ;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,OAAO,EAAE;AAAA,qBAAM6C,YAAY,CAACE,MAAb,CAAoB/C,KAApB,CAAN;AAAA,aAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CAjBF,CADoB;AAAA,SAAtB,CAFJ,EA+BE;AACE,UAAA,IAAI,EAAC,KADP;AAEE,UAAA,SAAS,EAAC,WAFZ;AAGE,UAAA,OAAO,EAAE;AAAA,mBAAM6C,YAAY,CAACG,IAAb,CAAkB;AAAE7C,cAAAA,IAAI,EAAE,EAAR;AAAYE,cAAAA,GAAG,EAAE;AAAjB,aAAlB,CAAN;AAAA,WAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA/BF,CADkB;AAAA,OAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,EAiEE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjEF,CADF;AAqED,GA3GH,CAFF,CADF;AAkHD,CAvHD;;AAyHA,eAAec,cAAf","sourcesContent":["import { Formik, Form, useField, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport IMAInputs from \"IMAInputs\"\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\n\r\n\r\nfunction submitNewSale(productList, values) {\r\n  var totalPrice = 0;\r\n  var existingProductQty = 0;\r\n  var productPrice = 0;\r\n  values.quantities.forEach((product, index)=> {\r\n    var p = getProductFromProductList(productList, product.name);\r\n    productPrice = p.price;\r\n    existingProductQty = p.qty\r\n    product.price = productPrice;\r\n    totalPrice += product.price * product.qty;\r\n  }, values.quantities );\r\n  values.totalPrice = totalPrice;\r\n  values.date = moment(values.date).add(1, 'minutes').toDate()\r\n  insertSaleIntoSales(values); \r\n  //check if customer already exists by Name. if not add new with email if exists.\r\n  values['quantities'].forEach((product, index) => {\r\n    updateProductInInventory(product['name'], existingProductQty - product['qty'], productPrice)\r\n  })\r\n}\r\n\r\nfunction getProductFromProductList(productList, productName) {\r\n  var ret = null\r\n  productList.forEach((product, index) => {\r\n    if(product.name === productName) {\r\n      ret = product;\r\n    }\r\n  })\r\n  return ret;\r\n}\r\n\r\nconst updateProductInInventory = async (name, qty, productPrice) => {\r\n  const res = await fetch('http://localhost:3000/api/inventoryUpdate', {\r\n    method: 'post',\r\n    body: JSON.stringify({ name: name, qty: qty, price:productPrice })\r\n  })\r\n}\r\n\r\nconst insertSaleIntoSales = async (sale) => {\r\n  const rest = await fetch('http://localhost:3000/api/sales', {\r\n    method:'post',\r\n    body: JSON.stringify(sale)\r\n    })\r\n}\r\n\r\n\r\nconst IMANewSaleForm = props => {\r\n  console.log(JSON.stringify(props.productList.map(\r\n    function (val, index) {\r\n      return { name: val.name }\r\n    })));\r\n  return (\r\n    <>\r\n      <h1>Add New Sale</h1>\r\n      <Formik\r\n        initialValues={{\r\n          customerName: \"\",\r\n          date: \"\",\r\n          customerEmail: \"\",\r\n          quantities: [{}] // added for our select\r\n        }}\r\n        validationSchema={Yup.object({\r\n          customerName: Yup.string()\r\n            .max(15, \"Must be 15 characters or less\")\r\n            .required(\"Required\"),\r\n          date: Yup.date()\r\n            .required(\"Required\"),\r\n          customerEmail: Yup.string()\r\n            .email(\"Invalid email address\"),\r\n          quantities: Yup.array()\r\n            .of(\r\n              Yup.object().shape({\r\n                name: Yup.string()\r\n                  .required('Required'),\r\n                qty: Yup.number()\r\n                  .min(0, 'Must be atleast 1')\r\n                  .required('Required'),\r\n              })\r\n            ).required('Must have products sold')\r\n            .min(1, 'Minimum of 1 product'),\r\n        })}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          console.log(\"new sale submitted\" + JSON.stringify(values));\r\n          resetForm({});\r\n          setTimeout(() => {\r\n            submitNewSale(props.productList, values);\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n          }, 400);\r\n        }}\r\n      >\r\n        {({ values, errors, touched, handleReset, setFieldValue }) => {\r\n          return (\r\n            <Form>\r\n              <IMAInputs.MyTextInput\r\n                label=\"Customer Name\"\r\n                name=\"customerName\"\r\n                type=\"text\"\r\n                placeholder=\"John Doe\"\r\n              />\r\n              <MyDateInput\r\n                label=\"Date of Sale\"\r\n                name=\"date\"\r\n                type=\"date\"\r\n                placeholder={moment()}\r\n              />\r\n              <MyTextInput\r\n                label=\"Customer Email Address\"\r\n                name=\"customerEmail\"\r\n                type=\"email\"\r\n                placeholder=\"jane@doe.com\"\r\n              />\r\n              <h3>Add Products Bought</h3>\r\n              <FieldArray\r\n                name=\"quantities\"\r\n                render={arrayHelpers => (\r\n                  <div>\r\n                    {values.quantities.length > 0 &&\r\n                      values.quantities.map((product, index) => (\r\n                        <div className=\"row\" key={index}>\r\n                          <div className=\"col\">\r\n                            <label htmlFor={`quantities.${index}.name`}>Name</label>\r\n                            <MySelect label=\"Product Name\" name={`quantities.${index}.name`}>\r\n                              <option selected=\"selected\" value=\"\">Select a product</option>\r\n                              {props.productList.map(product => <option key={product.name} value={product.name}>{product.name + \" ($\"+ product.price +\")\"}</option>)}\r\n\r\n                            </MySelect>\r\n                          </div>\r\n                          <div className=\"col\">\r\n                            <label htmlFor={`quantities.${index}.qty`}> Quantity</label>\r\n                            <MyTextInput\r\n                              name={`quantities.${index}.qty`}\r\n                              placeholder=\"99999\"\r\n                              type=\"number\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"col\">\r\n                            <button\r\n                              className=\"secondary\"\r\n                              type=\"remove\"\r\n                              onClick={() => arrayHelpers.remove(index)}\r\n                            >\r\n                              X\r\n                      </button>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    <button\r\n                      type=\"add\"\r\n                      className=\"secondary\"\r\n                      onClick={() => arrayHelpers.push({ name: \"\", qty: \"\" })}\r\n                    >\r\n                      Add Product\r\n              </button>\r\n                  </div>\r\n                )}\r\n              />\r\n\r\n              <button type=\"submit\">Submit</button>\r\n            </Form>\r\n          )\r\n        }}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IMANewSaleForm;"]},"metadata":{},"sourceType":"module"}