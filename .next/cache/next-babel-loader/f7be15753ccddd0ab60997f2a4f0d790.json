{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\IMATable.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// Table.js\nimport { useTable } from \"react-table\";\nexport default function IMATable({\n  columns,\n  data,\n  filterInput,\n  setFilterInput\n}) {\n  // Use the useTable Hook to send the columns and data to build the table\n  // Use the useTable Hook to send the columns and data to build the table\n  const {\n    getTableProps,\n    // table props from react-table\n    getTableBodyProps,\n    // table body props from react-table\n    headerGroups,\n    // headerGroups if your table have groupings\n    rows,\n    // rows for the table based on the data passed\n    prepareRow,\n    // Prepare the row (this function need to called for each row before getting the row props)\n    setFilter\n  } = useTable({\n    columns,\n    data\n  }, useFilters);\n\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setFilterInput(value);\n  }; // Input element\n\n\n  __jsx(\"input\", {\n    value: filterInput,\n    onChange: handleFilterChange,\n    placeholder: \"Search name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  });\n  /* \r\n    Render the UI for your table\r\n    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n  */\n\n\n  return __jsx(\"table\", _extends({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, headerGroups.map(headerGroup => __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), headerGroup.headers.map(column => __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), column.render(\"Header\")))))), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), row.cells.map(cell => {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }), cell.render(\"Cell\"));\n    }));\n  })));\n}","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/IMATable.js"],"names":["useTable","IMATable","columns","data","filterInput","setFilterInput","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","useFilters","handleFilterChange","e","value","target","undefined","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":";;;;;;AAAA;AACA,SAASA,QAAT,QAAyB,aAAzB;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,WAAjB;AAA8BC,EAAAA;AAA9B,CAAlB,EAAkE;AAAC;AAC9E;AACA,QAAM;AACFC,IAAAA,aADE;AACa;AACfC,IAAAA,iBAFE;AAEiB;AACnBC,IAAAA,YAHE;AAGY;AACdC,IAAAA,IAJE;AAII;AACNC,IAAAA,UALE;AAKU;AACZC,IAAAA;AANE,MAOFX,QAAQ,CAAC;AACTE,IAAAA,OADS;AAETC,IAAAA;AAFS,GAAD,EAIZS,UAJY,CAPZ;;AAaA,QAAMC,kBAAkB,GAAGC,CAAC,IAAI;AAC5B,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAT,IAAkBE,SAAhC;AACAZ,IAAAA,cAAc,CAACU,KAAD,CAAd;AACD,GAHH,CAf6E,CAoB3E;;;AACA;AACE,IAAA,KAAK,EAAEX,WADT;AAEE,IAAA,QAAQ,EAAES,kBAFZ;AAGE,IAAA,WAAW,EAAE,aAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKF;;;;;;AAIA,SACI,4BAAWP,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,YAAY,CAACU,GAAb,CAAiBC,WAAW,IACzB,yBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwBI,MAAM,IAC3B,yBAAQA,MAAM,CAACC,cAAP,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkCD,MAAM,CAACE,MAAP,CAAc,QAAd,CAAlC,CADH,CADL,CADH,CADL,CADJ,EAUI,4BAAWjB,iBAAiB,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKE,IAAI,CAACS,GAAL,CAAS,CAACO,GAAD,EAAMC,CAAN,KAAY;AAClBhB,IAAAA,UAAU,CAACe,GAAD,CAAV;AACA,WACI,yBAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACKF,GAAG,CAACG,KAAJ,CAAUV,GAAV,CAAcW,IAAI,IAAI;AACnB,aAAO,yBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA8BD,IAAI,CAACL,MAAL,CAAY,MAAZ,CAA9B,CAAP;AACH,KAFA,CADL,CADJ;AAOH,GATA,CADL,CAVJ,CADJ;AAyBH","sourcesContent":["// Table.js\r\nimport { useTable } from \"react-table\";\r\n\r\nexport default function IMATable({ columns, data, filterInput, setFilterInput }) {// Use the useTable Hook to send the columns and data to build the table\r\n    // Use the useTable Hook to send the columns and data to build the table\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups if your table have groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow, // Prepare the row (this function need to called for each row before getting the row props)\r\n        setFilter \r\n    } = useTable({\r\n        columns,\r\n        data\r\n    }, \r\n    useFilters );\r\n\r\n    const handleFilterChange = e => {\r\n        const value = e.target.value || undefined;\r\n        setFilterInput(value);\r\n      };\r\n      \r\n      // Input element\r\n      <input\r\n        value={filterInput}\r\n        onChange={handleFilterChange}\r\n        placeholder={\"Search name\"}\r\n      />\r\n    /* \r\n      Render the UI for your table\r\n      - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n    */\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}