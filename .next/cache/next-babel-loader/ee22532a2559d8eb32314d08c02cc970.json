{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\pages\\\\inventory.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: 1rem;\\n\\n  table {\\n    border-spacing: 0;\\n    border: 1px solid black;\\n\\n    tr {\\n      :last-child {\\n        td {\\n          border-bottom: 0;\\n        }\\n      }\\n    }\\n\\n    th,\\n    td {\\n      margin: 0;\\n      padding: 0.5rem;\\n      border-bottom: 1px solid black;\\n      border-right: 1px solid black;\\n\\n      :last-child {\\n        border-right: 0;\\n      }\\n\\n      input {\\n        font-size: 1rem;\\n        padding: 0;\\n        margin: 0;\\n        border: 0;\\n      }\\n    }\\n  }\\n\\n  .pagination {\\n    padding: 0.5rem;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport fetch from 'isomorphic-unfetch';\nimport IMALayout from '../components/IMALayout';\nimport styled from \"@emotion/styled\";\nvar Styles = styled.div(_templateObject()); // Create an editable cell renderer\n\nvar EditableCell = function EditableCell(_ref) {\n  var initialValue = _ref.cell.value,\n      index = _ref.row.index,\n      id = _ref.column.id,\n      updateMyData = _ref.updateMyData;\n\n  // We need to keep and update the state of the cell normally\n  var _React$useState = React.useState(initialValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var onChange = function onChange(e) {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  var onBlur = function onBlur() {\n    updateMyData(index, id, value);\n  }; // If the initialValue is changed externall, sync it up with our state\n\n\n  React.useEffect(function () {\n    setValue(initialValue);\n  }, [initialValue]);\n  return __jsx(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  });\n}; // Set our editable cell renderer as the default Cell renderer\n\n\nvar defaultColumn = {\n  Cell: EditableCell\n}; // Be sure to pass our updateMyData and the skipPageReset option\n\nfunction Table(_ref2) {\n  var columns = _ref2.columns,\n      data = _ref2.data,\n      updateMyData = _ref2.updateMyData,\n      skipPageReset = _ref2.skipPageReset;\n\n  // For this example, we're using pagination to illustrate how to stop\n  // the current page from resetting when our data changes\n  // Otherwise, nothing is different here.\n  var _useTable = useTable({\n    columns: columns,\n    data: data,\n    defaultColumn: defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData: updateMyData\n  }, usePagination),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      prepareRow = _useTable.prepareRow,\n      page = _useTable.page,\n      canPreviousPage = _useTable.canPreviousPage,\n      canNextPage = _useTable.canNextPage,\n      pageOptions = _useTable.pageOptions,\n      pageCount = _useTable.pageCount,\n      gotoPage = _useTable.gotoPage,\n      nextPage = _useTable.nextPage,\n      previousPage = _useTable.previousPage,\n      setPageSize = _useTable.setPageSize,\n      _useTable$state = _useTable.state,\n      pageIndex = _useTable$state.pageIndex,\n      pageSize = _useTable$state.pageSize; // Render the UI for your table\n\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), headerGroup.headers.map(function (column) {\n      return __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), column.render('Header'));\n    }));\n  })), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), page.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), row.cells.map(function (cell) {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(0);\n    },\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return previousPage();\n    },\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return nextPage();\n    },\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: function onClick() {\n      return gotoPage(pageCount - 1);\n    },\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, '>>'), ' ', __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \"Page\", ' ', __jsx(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: function onChange(e) {\n      var page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: function onChange(e) {\n      setPageSize(Number(e.target.value));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, [10, 20, 30, 40, 50].map(function (pageSize) {\n    return __jsx(\"option\", {\n      key: pageSize,\n      value: pageSize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Show \", pageSize);\n  }))));\n}\n\nvar InventoryPage = function InventoryPage(props) {\n  var columns = React.useMemo(function () {\n    return [{\n      Header: 'Product Name',\n      accessor: 'name'\n    }, {\n      Header: 'Price',\n      accessor: 'price'\n    }, {\n      Header: 'Stock',\n      accessor: 'qty'\n    }];\n  });\n  return __jsx(IMALayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"Inventory management table.\", __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateMyData: updateMyData,\n    skipPageReset: skipPageReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  })));\n};\n\nInventoryPage.getInitialProps = function _callee() {\n  var res, json;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/inventory'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          json = _context.sent;\n          console.log(\"Inventory fetched.\".concat(_JSON$stringify(json)));\n          return _context.abrupt(\"return\", {\n            inventory: json,\n            columns: [{\n              title: \"Product Name\",\n              field: \"name\",\n              sorter: \"string\",\n              width: 150\n            }, {\n              title: \"Stock\",\n              field: \"qty\",\n              sorter: \"number\"\n            }, {\n              title: \"Price\",\n              field: \"price\",\n              align: \"right\"\n            }]\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default InventoryPage;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/pages/inventory.js"],"names":["fetch","IMALayout","styled","Styles","div","EditableCell","initialValue","cell","value","index","row","id","column","updateMyData","React","useState","setValue","onChange","e","target","onBlur","useEffect","defaultColumn","Cell","Table","columns","data","skipPageReset","useTable","autoResetPage","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","getCellProps","length","Number","width","InventoryPage","props","useMemo","Header","accessor","getInitialProps","res","json","console","log","inventory","title","field","sorter","align"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\nimport IMALayout from '../components/IMALayout';\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n\r\n      input {\r\n        font-size: 1rem;\r\n        padding: 0;\r\n        margin: 0;\r\n        border: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination {\r\n    padding: 0.5rem;\r\n  }\r\n`\r\n\r\n// Create an editable cell renderer\r\nconst EditableCell = ({\r\n    cell: { value: initialValue },\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData, // This is a custom function that we supplied to our table instance\r\n}) => {\r\n    // We need to keep and update the state of the cell normally\r\n    const [value, setValue] = React.useState(initialValue)\r\n\r\n    const onChange = e => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    // We'll only update the external data when the input is blurred\r\n    const onBlur = () => {\r\n        updateMyData(index, id, value)\r\n    }\r\n\r\n    // If the initialValue is changed externall, sync it up with our state\r\n    React.useEffect(() => {\r\n        setValue(initialValue)\r\n    }, [initialValue])\r\n\r\n    return <input value={value} onChange={onChange} onBlur={onBlur} />\r\n}\r\n\r\n// Set our editable cell renderer as the default Cell renderer\r\nconst defaultColumn = {\r\n    Cell: EditableCell,\r\n}\r\n\r\n// Be sure to pass our updateMyData and the skipPageReset option\r\nfunction Table({ columns, data, updateMyData, skipPageReset }) {\r\n    // For this example, we're using pagination to illustrate how to stop\r\n    // the current page from resetting when our data changes\r\n    // Otherwise, nothing is different here.\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        state: { pageIndex, pageSize },\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            // use the skipPageReset option to disable page resetting temporarily\r\n            autoResetPage: !skipPageReset,\r\n            // updateMyData isn't part of the API, but\r\n            // anything we put into these options will\r\n            // automatically be available on the instance.\r\n            // That way we can call this function from our\r\n            // cell renderer!\r\n            updateMyData,\r\n        },\r\n        usePagination\r\n    )\r\n\r\n    // Render the UI for your table\r\n    return (\r\n        <>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {page.map((row, i) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"pagination\">\r\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n                    {'<<'}\r\n                </button>{' '}\r\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n                    {'<'}\r\n                </button>{' '}\r\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n                    {'>'}\r\n                </button>{' '}\r\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n                    {'>>'}\r\n                </button>{' '}\r\n                <span>\r\n                    Page{' '}\r\n                    <strong>\r\n                        {pageIndex + 1} of {pageOptions.length}\r\n                    </strong>{' '}\r\n                </span>\r\n                <span>\r\n                    | Go to page:{' '}\r\n                    <input\r\n                        type=\"number\"\r\n                        defaultValue={pageIndex + 1}\r\n                        onChange={e => {\r\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n                            gotoPage(page)\r\n                        }}\r\n                        style={{ width: '100px' }}\r\n                    />\r\n                </span>{' '}\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={e => {\r\n                        setPageSize(Number(e.target.value))\r\n                    }}\r\n                >\r\n                    {[10, 20, 30, 40, 50].map(pageSize => (\r\n                        <option key={pageSize} value={pageSize}>\r\n                            Show {pageSize}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst InventoryPage = props => {\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Product Name',\r\n                accessor: 'name',\r\n            },\r\n            {\r\n                Header: 'Price',\r\n                accessor: 'price',\r\n            },\r\n            {\r\n                Header: 'Stock',\r\n                accessor: 'qty',\r\n            }\r\n        ],\r\n    )\r\n\r\n    return (\r\n        <IMALayout>\r\n            <div className=\"container\" >\r\n                Inventory management table.\r\n                <Table\r\n                    columns={columns}\r\n                    data={data}\r\n                    updateMyData={updateMyData}\r\n                    skipPageReset={skipPageReset}\r\n                />\r\n            </div>\r\n        </IMALayout>\r\n    );\r\n}\r\n\r\nInventoryPage.getInitialProps = async () => {\r\n    const res = await fetch('http://localhost:3000/api/inventory')\r\n    const json = await res.json()\r\n    console.log(`Inventory fetched.${JSON.stringify(json)}`);\r\n    return {\r\n        inventory: json,\r\n        columns: [\r\n            { title: \"Product Name\", field: \"name\", sorter: \"string\", width: 150 },\r\n            { title: \"Stock\", field: \"qty\", sorter: \"number\" },\r\n            { title: \"Price\", field: \"price\", align: \"right\" },\r\n        ]\r\n    }\r\n}\r\n\r\nexport default InventoryPage;"]},"metadata":{},"sourceType":"module"}