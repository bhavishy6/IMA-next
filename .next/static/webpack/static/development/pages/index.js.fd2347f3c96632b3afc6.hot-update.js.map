{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.fd2347f3c96632b3afc6.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import IMALayout from '../components/IMALayout'\r\nimport IMARecentSalesChart from '../components/IMARecentSalesChart'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport IMANewSaleForm from '../components/forms/IMANewSaleForm';\r\nimport { Component } from 'react';\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\nclass Dashboard extends Component {\r\n    state = {\r\n        productList: [],\r\n        recentSalesByDateDict: [],\r\n        isLoading: true\r\n    }\r\n\r\n\r\n    async fetchInventory() {\r\n        const inventory = await fetch('http://localhost:3000/api/inventory')\r\n        const inventoryjson = await inventory.json()\r\n        return inventoryjson;\r\n    }\r\n\r\n    async fetchRecentSales(daysAgo) {\r\n        const sales = await fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo)\r\n        const salesjson = await sales.json()\r\n        return salesjson;\r\n    }\r\n    async componentDidMount() {\r\n        var salesDict = []\r\n        var _asyncMostRecentSales = this.fetchRecentSales(30).then(externalData => {\r\n            salesDict = this.getMostRecentSalesDict(externalData);\r\n            this.setState({recentSalesByDateDict:this.getMostRecentSalesNIVO(salesDict)});\r\n        })\r\n\r\n        console.log(\"cdm mrs\" + JSON.stringify(salesDict));\r\n\r\n        var productList = []\r\n        var _asyncInventory = this.fetchInventory().then(externalData => {\r\n            productList = externalData;\r\n        });\r\n\r\n        this.setState({\r\n            productList: productList,\r\n            recentSalesByDateDict: salesDict,\r\n        });\r\n    }\r\n\r\n    getMostRecentSalesDict(sales) {\r\n        console.log(\"mrd\" + JSON.stringify(sales))\r\n        var recentSales = {}\r\n        sales.forEach((sale, index) => {\r\n            var date = moment(sale[\"date\"]).format(\"L\")\r\n            console.log(\"checking dateL : \" + date)\r\n            var quantities = sale[\"quantities\"]\r\n            if (recentSales[date]) {\r\n                console.log('this date exists' + date)\r\n                recentSales[date].forEach((product, index) => {\r\n                    var sameProduct = this.findProductInQuantities(product[\"name\"], quantities)\r\n                    if (sameProduct === null) {\r\n\r\n                    } else {\r\n                        product[\"qty\"] += sameProduct[\"qty\"]\r\n                    }\r\n                }, recentSales[date])\r\n            } else {\r\n                //this date does not yet exist in recentSales\r\n                recentSales[date] = sale[\"quantities\"]\r\n            }\r\n        })\r\n        console.log(JSON.stringify(recentSales))\r\n        return recentSales;\r\n    };\r\n\r\n    getMostRecentSalesNIVO(recentSalesDict) {\r\n        console.log(\"nivo\" + JSON.stringify(recentSalesDict))\r\n        var recentSales = []\r\n        Object.keys(recentSalesDict).forEach(function (date, index) {\r\n            var salesOnDate = recentSalesDict[date]\r\n            recentSales.push({})\r\n            recentSales[index]['date'] = date\r\n            for (var i = 0; i < salesOnDate.length; i++) {\r\n                recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty']\r\n                switch (salesOnDate[i]['name']) {\r\n                    case 'Iron Sheet':\r\n                        recentSales[index]['Iron SheetColor'] = \"hsl(129, 70%, 50%)\";\r\n                        break;\r\n                    case 'Copper Sheet':\r\n                        recentSales[index]['Copper SheetColor'] = \"hsl(77, 70%, 50%)\";\r\n                        break;\r\n                    case 'Free Product':\r\n                        recentSales[index]['Free ProductColor'] = \"hsl(150, 70%, 50%)\";\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n        this.setState({ 'isLoading': false });\r\n        return recentSales;\r\n    }\r\n\r\n    findProductInQuantities(name, quantities) {\r\n        var foundProduct = null;\r\n        quantities.forEach((product, index) => {\r\n            console.log(name + \"checking product name: \" + product['name'])\r\n            if (name == product['name']) {\r\n                foundProduct = product;\r\n            }\r\n        });\r\n        return foundProduct;\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, recentSalesByDateDict } = this.state\r\n        console.log(JSON.stringify(recentSalesByDateDict));\r\n        return (\r\n            <IMALayout>\r\n                <div >\r\n                    form to add new sale\r\n                    form to add new customer\r\n                    form to add new inventory item1\r\n                    {isLoading ? <p>Loading...</p> :\r\n                     <> \r\n                        <p>recent sales since 30 days ago: {JSON.stringify(recentSalesByDateDict)}</p>\r\n\r\n                        <div style={{ height: 500 + \"px\", width: 500 + 'px' }}>\r\n                            <IMARecentSalesChart data={recentSalesByDateDict} />\r\n                        </div>\r\n                    </>\r\n\r\n                    }\r\n                </div>\r\n\r\n                <IMANewSaleForm productList={this.state.productList} />\r\n            </IMALayout>\r\n\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Dashboard;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;;;;;;;;;;;;;AAOA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;;;;;;;;;;AAEA;;;;;;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AACA;;;;;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AATA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAjIA;AACA;AAmIA;;;;A","sourceRoot":""}