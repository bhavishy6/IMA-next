{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\forms\\\\IMANewProductForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"@emotion/styled\";\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nconst MyTextInput = (_ref) => {\n  let {\n    label\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nconst MySelect = (_ref2) => {\n  let {\n    label\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(StyledLabel, {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, label), __jsx(StyledSelect, _extends({}, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(StyledErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nconst MyDateInput = (_ref3) => {\n  let {\n    label\n  } = _ref3,\n      props = _objectWithoutProperties(_ref3, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nfunction submitNewSale(productList, values) {\n  var totalPrice = 0;\n  values.quantities.forEach((product, index) => {\n    var productPrice = getProductFromProductList(productList, product.name).price;\n    product.price = productPrice;\n    totalPrice += product.price * product.qty;\n  }, values.quantities);\n  values.totalPrice = totalPrice;\n  insertSaleIntoSales(values); //check if customer already exists by Name. if not add new with email if exists.\n\n  values['quantities'].forEach((product, index) => {\n    updateProductInInventory(product['name'], product['qty']);\n  });\n}\n\nfunction getProductFromProductList(productList, productName) {\n  var ret = null;\n  productList.forEach((product, index) => {\n    if (product.name === productName) {\n      ret = product;\n    }\n  });\n  return ret;\n}\n\nconst updateProductInInventory = async (name, incrementAmt) => {\n  const res = await fetch('http://localhost:3000/api/inventoryUpdate', {\n    method: 'post',\n    body: JSON.stringify({\n      name: name,\n      incrementAmt: incrementAmt\n    })\n  });\n};\n\nconst insertSaleIntoSales = async sale => {\n  const rest = await fetch('http://localhost:3000/api/sales', {\n    method: 'post',\n    body: JSON.stringify(sale)\n  });\n}; // Styled components ....\n\n\nconst StyledSelect = styled.select`\n    color: var(--blue);\n  `;\nconst StyledErrorMessage = styled.div`\n    font-size: 12px;\n    color: var(--red-600);\n    width: 400px;\n    margin-top: 0.25rem;\n    &:before {\n      content: \"❌ \";\n      font-size: 10px;\n    }\n    @media (prefers-color-scheme: dark) {\n      color: var(--red-300);\n    }\n  `;\nconst StyledLabel = styled.label`\n    margin-top: 1rem;\n  `;\n\nconst IMANewProductForm = props => {\n  console.log(JSON.stringify(props.inventory.map(function (val, index) {\n    return {\n      name: val.name\n    };\n  })));\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Add New Sale\"), __jsx(Formik, {\n    initialValues: {\n      name: \"\",\n      price: \"\",\n      qty: \"\"\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n      price: Yup.number().required(\"Required\"),\n      qty: Yup.number().required(\"Required\")\n    }),\n    onSubmit: (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      console.log(\"new product submitted\" + JSON.stringify(values));\n      resetForm({});\n      setTimeout(() => {\n        submitNewProduct(values);\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, ({\n    values,\n    errors,\n    touched,\n    handleReset,\n    setFieldValue\n  }) => {\n    return __jsx(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, __jsx(MyTextInput, {\n      label: \"Product Name\",\n      name: \"name\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), __jsx(MyTextInput, {\n      label: \"Product Price\",\n      name: \"price\",\n      type: \"number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), __jsx(MyTextInput, {\n      label: \"Quantity in Stock\",\n      name: \"number\",\n      type: \"number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Submit\"));\n  }));\n};\n\nexport default IMANewProductForm;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/forms/IMANewProductForm.js"],"names":["Formik","Form","useField","FieldArray","Yup","styled","moment","require","format","MyTextInput","label","props","field","meta","id","name","touched","error","MySelect","MyDateInput","submitNewSale","productList","values","totalPrice","quantities","forEach","product","index","productPrice","getProductFromProductList","price","qty","insertSaleIntoSales","updateProductInInventory","productName","ret","incrementAmt","res","fetch","method","body","JSON","stringify","sale","rest","StyledSelect","select","StyledErrorMessage","div","StyledLabel","IMANewProductForm","console","log","inventory","map","val","object","string","max","required","number","setSubmitting","resetForm","setTimeout","submitNewProduct","alert","errors","handleReset","setFieldValue"],"mappings":"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","sourcesContent":["import { Formik, Form, useField, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MySelect = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n      <StyledSelect {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MyDateInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nfunction submitNewSale(productList, values) {\r\n  var totalPrice = 0;\r\n  values.quantities.forEach((product, index)=> {\r\n    var productPrice = getProductFromProductList(productList, product.name).price;\r\n    product.price = productPrice;\r\n    totalPrice += product.price * product.qty;\r\n  }, values.quantities );\r\n  values.totalPrice = totalPrice;\r\n  insertSaleIntoSales(values); \r\n  //check if customer already exists by Name. if not add new with email if exists.\r\n  values['quantities'].forEach((product, index) => {\r\n    updateProductInInventory(product['name'], product['qty'])\r\n  })\r\n}\r\n\r\nfunction getProductFromProductList(productList, productName) {\r\n  var ret = null\r\n  productList.forEach((product, index) => {\r\n    if(product.name === productName) {\r\n      ret = product;\r\n    }\r\n  })\r\n  return ret;\r\n}\r\n\r\nconst updateProductInInventory = async (name, incrementAmt) => {\r\n  const res = await fetch('http://localhost:3000/api/inventoryUpdate', {\r\n    method: 'post',\r\n    body: JSON.stringify({ name: name, incrementAmt: incrementAmt })\r\n  })\r\n}\r\n\r\nconst insertSaleIntoSales = async (sale) => {\r\n  const rest = await fetch('http://localhost:3000/api/sales', {\r\n    method:'post',\r\n    body: JSON.stringify(sale)\r\n  })\r\n}\r\n\r\n// Styled components ....\r\nconst StyledSelect = styled.select`\r\n    color: var(--blue);\r\n  `;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n    font-size: 12px;\r\n    color: var(--red-600);\r\n    width: 400px;\r\n    margin-top: 0.25rem;\r\n    &:before {\r\n      content: \"❌ \";\r\n      font-size: 10px;\r\n    }\r\n    @media (prefers-color-scheme: dark) {\r\n      color: var(--red-300);\r\n    }\r\n  `;\r\n\r\nconst StyledLabel = styled.label`\r\n    margin-top: 1rem;\r\n  `;\r\n\r\n\r\nconst IMANewProductForm = props => {\r\n  console.log(JSON.stringify(props.inventory.map(\r\n    function (val, index) {\r\n      return { name: val.name }\r\n    })));\r\n  return (\r\n    <>\r\n      <h1>Add New Sale</h1>\r\n      <Formik\r\n        initialValues={{\r\n          name: \"\",\r\n          price: \"\",\r\n          qty: \"\",\r\n          }}\r\n        validationSchema={Yup.object({\r\n          name: Yup.string()\r\n            .max(15, \"Must be 15 characters or less\")\r\n            .required(\"Required\"),\r\n          price: Yup.number()\r\n            .required(\"Required\"),\r\n          qty: Yup.number()\r\n            .required(\"Required\"),\r\n        })}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          console.log(\"new product submitted\" + JSON.stringify(values));\r\n          resetForm({});\r\n          setTimeout(() => {\r\n            submitNewProduct(values);\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n          }, 400);\r\n        }}\r\n      >\r\n        {({ values, errors, touched, handleReset, setFieldValue }) => {\r\n          return (\r\n            <Form>\r\n              <MyTextInput\r\n                label=\"Product Name\"\r\n                name=\"name\"\r\n                type=\"text\"\r\n              />\r\n              <MyTextInput\r\n                label=\"Product Price\"\r\n                name=\"price\"\r\n                type=\"number\"\r\n              />\r\n              <MyTextInput\r\n                label=\"Quantity in Stock\"\r\n                name=\"number\"\r\n                type=\"number\"\r\n              />\r\n              <button type=\"submit\">Submit</button>\r\n            </Form>\r\n          )\r\n        }}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IMANewProductForm;"]},"metadata":{},"sourceType":"module"}