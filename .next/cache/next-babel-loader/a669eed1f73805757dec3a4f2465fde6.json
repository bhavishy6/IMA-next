{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\forms\\\\IMAInputs.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useField } from \"formik\";\nimport styled from \"@emotion/styled\"; // Styled components ....\n\nexport const StyledSelect = styled.select`\n    color: var(--blue);\n  `;\nexport const StyledErrorMessage = styled.div`\n    font-size: 12px;\n    color: var(--red-600);\n    width: 400px;\n    margin-top: 0.25rem;\n    &:before {\n      content: \"❌ \";\n      font-size: 10px;\n    }\n    @media (prefers-color-scheme: dark) {\n      color: var(--red-300);\n    }\n  `;\nexport const StyledLabel = styled.label`\n    margin-top: 1rem;\n  `;\nexport const MyTextInput = (_ref) => {\n  let {\n    label\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, meta.error) : null);\n};\nexport const MySelect = (_ref2) => {\n  let {\n    label\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(StyledLabel, {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, label), __jsx(StyledSelect, _extends({}, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(StyledErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, meta.error) : null);\n};\nexport const MyDateInput = (_ref3) => {\n  let {\n    label\n  } = _ref3,\n      props = _objectWithoutProperties(_ref3, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, meta.error) : null);\n};","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/forms/IMAInputs.js"],"names":["useField","styled","StyledSelect","select","StyledErrorMessage","div","StyledLabel","label","MyTextInput","props","field","meta","id","name","touched","error","MySelect","MyDateInput"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,QAAzB;AAEA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAGD,MAAM,CAACE,MAAO;;GAAnC;AAIP,OAAO,MAAMC,kBAAkB,GAAGH,MAAM,CAACI,GAAI;;;;;;;;;;;;GAAtC;AAcP,OAAO,MAAMC,WAAW,GAAGL,MAAM,CAACM,KAAM;;GAAjC;AAKP,OAAO,MAAMC,WAAW,GAAG,UAAyB;AAAA,MAAxB;AAAED,IAAAA;AAAF,GAAwB;AAAA,MAAZE,KAAY;;AAChD;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBX,QAAQ,CAACS,KAAD,CAA9B;AACA,SACI,4BACI;AAAO,IAAA,OAAO,EAAEA,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCN,KAAzC,CADJ,EAEI;AAAO,IAAA,SAAS,EAAC;AAAjB,KAAkCG,KAAlC,EAA6CD,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAGKE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,GACG;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBJ,IAAI,CAACI,KAA7B,CADH,GAEG,IALR,CADJ;AASH,CAbM;AAeP,OAAO,MAAMC,QAAQ,GAAG,WAAyB;AAAA,MAAxB;AAAET,IAAAA;AAAF,GAAwB;AAAA,MAAZE,KAAY;;AAC7C;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBX,QAAQ,CAACS,KAAD,CAA9B;AACA,SACI,4BACI,MAAC,WAAD;AAAa,IAAA,OAAO,EAAEA,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+CN,KAA/C,CADJ,EAEI,MAAC,YAAD,eAAkBG,KAAlB,EAA6BD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAGKE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,GACG,MAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBJ,IAAI,CAACI,KAA1B,CADH,GAEG,IALR,CADJ;AASH,CAbM;AAeP,OAAO,MAAME,WAAW,GAAG,WAAyB;AAAA,MAAxB;AAAEV,IAAAA;AAAF,GAAwB;AAAA,MAAZE,KAAY;;AAChD;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBX,QAAQ,CAACS,KAAD,CAA9B;AACA,SACI,4BACI;AAAO,IAAA,OAAO,EAAEA,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCN,KAAzC,CADJ,EAEI;AAAO,IAAA,SAAS,EAAC;AAAjB,KAAkCG,KAAlC,EAA6CD,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAGKE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,GACG;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBJ,IAAI,CAACI,KAA7B,CADH,GAEG,IALR,CADJ;AASH,CAbM","sourcesContent":["import { useField } from \"formik\";\r\n\r\nimport styled from \"@emotion/styled\";\r\n\r\n// Styled components ....\r\nexport const StyledSelect = styled.select`\r\n    color: var(--blue);\r\n  `;\r\n\r\nexport const StyledErrorMessage = styled.div`\r\n    font-size: 12px;\r\n    color: var(--red-600);\r\n    width: 400px;\r\n    margin-top: 0.25rem;\r\n    &:before {\r\n      content: \"❌ \";\r\n      font-size: 10px;\r\n    }\r\n    @media (prefers-color-scheme: dark) {\r\n      color: var(--red-300);\r\n    }\r\n  `;\r\n\r\nexport const StyledLabel = styled.label`\r\n    margin-top: 1rem;\r\n  `;\r\n\r\n\r\nexport const MyTextInput = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n        <>\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            <input className=\"text-input\" {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"error\">{meta.error}</div>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nexport const MySelect = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n        <>\r\n            <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n            <StyledSelect {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nexport const MyDateInput = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n        <>\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            <input className=\"text-input\" {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"error\">{meta.error}</div>\r\n            ) : null}\r\n        </>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}