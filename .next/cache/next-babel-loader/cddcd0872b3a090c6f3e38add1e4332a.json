{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport withIMALayout from '../components/IMALayout';\nimport IMADaysAgoForm from '../components/IMADashBoardAgoForm';\nimport fetch from 'isomorphic-unfetch';\n\nconst Dashboard = ({}) => {\n  let data = {\n    calories: {\n      label: \"Calories\",\n      total: 1840,\n      target: 1850,\n      variant: 150\n    },\n    carbs: {\n      label: \"Carbs\",\n      total: 190,\n      target: 160,\n      variant: 15\n    },\n    fat: {\n      label: \"Fat\",\n      total: 55,\n      target: 60,\n      variant: 10\n    }\n  };\n  const [results, setResults] = useState(data);\n\n  const onChange = e => {\n    const data = _objectSpread({}, results);\n\n    let name = e.target.name;\n    let resultCollection = name.split(\" \")[0].toLowerCase();\n    let resultType = name.split(\" \")[1].toLowerCase();\n    data[resultCollection][resultType] = e.target.value;\n    setResults(data);\n  };\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(IMADashBoardAgoForm, {\n    collection: \"Sales\",\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n};\n\nDashboard.getInitialProps = async () => {\n  const res = await fetch('http://localhost:3000/api/sales?daysAgo=' + 30);\n  const json = await res.json();\n  console.log(`Show data fetched. ${JSON.stringify(json)}`);\n  return {\n    data: getMostRecentFormattedSales(json)\n  };\n};\n\nconst updateDaysAgoValue = evt => {\n  this.daysAgo = evt.target.value;\n};\n\nconst getSalesFromDaysAgo = async () => {\n  const res = await fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo);\n  const json = await res.json();\n  console.log(`Show data fetched. ${JSON.stringify(json)}`);\n  return {\n    data: getMostRecentFormattedSales(json)\n  };\n};\n\nfunction getMostRecentFormattedSales(sales) {\n  return sales;\n}\n\n;\nexport default withIMALayout(Dashboard);","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/pages/index.js"],"names":["withIMALayout","IMADaysAgoForm","fetch","Dashboard","data","calories","label","total","target","variant","carbs","fat","results","setResults","useState","onChange","e","name","resultCollection","split","toLowerCase","resultType","value","getInitialProps","res","json","console","log","JSON","stringify","getMostRecentFormattedSales","updateDaysAgoValue","evt","daysAgo","getSalesFromDaysAgo","sales"],"mappings":";;;;;;;;;;AAAA,OAAOA,aAAP,MAA0B,yBAA1B;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,SAAS,GAAG,CAAC,EAAD,KAAS;AACvB,MAAIC,IAAI,GAAG;AACPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE,UADC;AAERC,MAAAA,KAAK,EAAE,IAFC;AAGRC,MAAAA,MAAM,EAAE,IAHA;AAIRC,MAAAA,OAAO,EAAE;AAJD,KADH;AAOPC,IAAAA,KAAK,EAAE;AACLJ,MAAAA,KAAK,EAAE,OADF;AAELC,MAAAA,KAAK,EAAE,GAFF;AAGLC,MAAAA,MAAM,EAAE,GAHH;AAILC,MAAAA,OAAO,EAAE;AAJJ,KAPA;AAaPE,IAAAA,GAAG,EAAE;AACHL,MAAAA,KAAK,EAAE,KADJ;AAEHC,MAAAA,KAAK,EAAE,EAFJ;AAGHC,MAAAA,MAAM,EAAE,EAHL;AAIHC,MAAAA,OAAO,EAAE;AAJN;AAbE,GAAX;AAqBA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBC,QAAQ,CAACV,IAAD,CAAtC;;AAEA,QAAMW,QAAQ,GAAIC,CAAD,IAAO;AACpB,UAAMZ,IAAI,qBAAQQ,OAAR,CAAV;;AAEA,QAAIK,IAAI,GAAGD,CAAC,CAACR,MAAF,CAASS,IAApB;AAEA,QAAIC,gBAAgB,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBC,WAAnB,EAAvB;AACA,QAAIC,UAAU,GAAGJ,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBC,WAAnB,EAAjB;AAEAhB,IAAAA,IAAI,CAACc,gBAAD,CAAJ,CAAuBG,UAAvB,IAAqCL,CAAC,CAACR,MAAF,CAASc,KAA9C;AAEAT,IAAAA,UAAU,CAACT,IAAD,CAAV;AACH,GAXD;;AAaA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,mBAAD;AAAqB,IAAA,UAAU,EAAC,OAAhC;AAAwC,IAAA,QAAQ,EAAEW,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAMH,CA3CD;;AA6CAZ,SAAS,CAACoB,eAAV,GAA4B,YAAY;AACpC,QAAMC,GAAG,GAAG,MAAMtB,KAAK,CAAC,6CAA6C,EAA9C,CAAvB;AACA,QAAMuB,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAqB,EAAvD;AACA,SAAO;AAAErB,IAAAA,IAAI,EAAE0B,2BAA2B,CAACL,IAAD;AAAnC,GAAP;AACH,CALD;;AAOA,MAAMM,kBAAkB,GAAIC,GAAD,IAAS;AAChC,OAAKC,OAAL,GAAeD,GAAG,CAACxB,MAAJ,CAAWc,KAA1B;AACH,CAFD;;AAIA,MAAMY,mBAAmB,GAAG,YAAY;AACpC,QAAMV,GAAG,GAAG,MAAMtB,KAAK,CAAC,6CAA6C+B,OAA9C,CAAvB;AACA,QAAMR,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAnB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAqB,EAAvD;AACA,SAAO;AAAErB,IAAAA,IAAI,EAAE0B,2BAA2B,CAACL,IAAD;AAAnC,GAAP;AACH,CALD;;AAOA,SAASK,2BAAT,CAAqCK,KAArC,EAA4C;AACxC,SAAOA,KAAP;AACH;;AAAA;AAED,eAAenC,aAAa,CAACG,SAAD,CAA5B","sourcesContent":["import withIMALayout from '../components/IMALayout'\r\nimport IMADaysAgoForm from '../components/IMADashBoardAgoForm'\r\nimport fetch from 'isomorphic-unfetch'\r\n\r\nconst Dashboard = ({ }) => {\r\n    let data = {\r\n        calories: {\r\n          label: \"Calories\",\r\n          total: 1840,\r\n          target: 1850,\r\n          variant: 150\r\n        },\r\n        carbs: {\r\n          label: \"Carbs\",\r\n          total: 190,\r\n          target: 160,\r\n          variant: 15\r\n        },\r\n        fat: {\r\n          label: \"Fat\",\r\n          total: 55,\r\n          target: 60,\r\n          variant: 10\r\n        }\r\n    }\r\n    \r\n    const [results, setResults] = useState(data);\r\n\r\n    const onChange = (e) => {\r\n        const data = { ...results };\r\n\r\n        let name = e.target.name;\r\n\r\n        let resultCollection = name.split(\" \")[0].toLowerCase();\r\n        let resultType = name.split(\" \")[1].toLowerCase();\r\n\r\n        data[resultCollection][resultType] = e.target.value;\r\n\r\n        setResults(data);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IMADashBoardAgoForm collection=\"Sales\" onChange={onChange} />\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nDashboard.getInitialProps = async () => {\r\n    const res = await fetch('http://localhost:3000/api/sales?daysAgo=' + 30)\r\n    const json = await res.json()\r\n    console.log(`Show data fetched. ${JSON.stringify(json)}`);\r\n    return { data: getMostRecentFormattedSales(json) };\r\n}\r\n\r\nconst updateDaysAgoValue = (evt) => {\r\n    this.daysAgo = evt.target.value;\r\n}\r\n\r\nconst getSalesFromDaysAgo = async () => {\r\n    const res = await fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo)\r\n    const json = await res.json()\r\n    console.log(`Show data fetched. ${JSON.stringify(json)}`);\r\n    return { data: getMostRecentFormattedSales(json) };\r\n}\r\n\r\nfunction getMostRecentFormattedSales(sales) {\r\n    return sales;\r\n};\r\n\r\nexport default withIMALayout(Dashboard);"]},"metadata":{},"sourceType":"module"}