{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\forms\\\\IMANewProductForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    margin-top: 1rem;\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    font-size: 12px;\\n    color: var(--red-600);\\n    width: 400px;\\n    margin-top: 0.25rem;\\n    &:before {\\n      content: \\\"\\u274C \\\";\\n      font-size: 10px;\\n    }\\n    @media (prefers-color-scheme: dark) {\\n      color: var(--red-300);\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    color: var(--blue);\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"@emotion/styled\";\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nvar MyTextInput = function MyTextInput(_ref) {\n  var label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nfunction submitNewProduct(productList, values) {\n  //check if customer already exists by Name. if not add new with email if exists.\n  if (productExistsInProductList(productList, values['name'])) {\n    updateProductInInventory(values['name'], values['qty']);\n  } else {\n    insertProductIntoInventory(values);\n  }\n}\n\nfunction productExistsInProductList(productList, productName) {\n  var ret = null;\n  productList.forEach(function (product, index) {\n    if (product.name === productName) {\n      ret = true;\n    }\n  });\n  return ret;\n}\n\nvar updateProductInInventory = function updateProductInInventory(name, incrementAmt) {\n  var res;\n  return _regeneratorRuntime.async(function updateProductInInventory$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/inventoryUpdate', {\n            method: 'post',\n            body: _JSON$stringify({\n              name: name,\n              incrementAmt: incrementAmt\n            })\n          }));\n\n        case 2:\n          res = _context.sent;\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar insertProductIntoInventory = function insertProductIntoInventory(product) {\n  var rest;\n  return _regeneratorRuntime.async(function insertProductIntoInventory$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/inventory', {\n            method: 'post',\n            body: _JSON$stringify(product)\n          }));\n\n        case 2:\n          rest = _context2.sent;\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}; // Styled components ....\n\n\nvar StyledSelect = styled.select(_templateObject());\nvar StyledErrorMessage = styled.div(_templateObject2());\nvar StyledLabel = styled.label(_templateObject3());\n\nvar IMANewProductForm = function IMANewProductForm(props) {\n  console.log(_JSON$stringify(props.inventory.map(function (val, index) {\n    return {\n      name: val.name\n    };\n  })));\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Add New Product\"), __jsx(Formik, {\n    initialValues: {\n      name: \"\",\n      price: \"\",\n      qty: \"\"\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n      price: Yup.number().required(\"Required\"),\n      qty: Yup.number().required(\"Required\")\n    }),\n    onSubmit: function onSubmit(values, _ref2) {\n      var setSubmitting = _ref2.setSubmitting,\n          resetForm = _ref2.resetForm;\n      console.log(\"new product submitted\" + _JSON$stringify(values));\n      resetForm({});\n      setTimeout(function () {\n        submitNewProduct(props.productList, values);\n        alert(_JSON$stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, function (_ref3) {\n    var values = _ref3.values,\n        errors = _ref3.errors,\n        touched = _ref3.touched,\n        handleReset = _ref3.handleReset,\n        setFieldValue = _ref3.setFieldValue;\n    return __jsx(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, __jsx(MyTextInput, {\n      label: \"Product Name\",\n      name: \"name\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), __jsx(MyTextInput, {\n      label: \"Product Price\",\n      name: \"price\",\n      type: \"number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), __jsx(MyTextInput, {\n      label: \"Quantity in Stock\",\n      name: \"number\",\n      type: \"number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Submit\"));\n  }));\n};\n\nexport default IMANewProductForm;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/forms/IMANewProductForm.js"],"names":["Formik","Form","useField","FieldArray","Yup","styled","moment","require","format","MyTextInput","label","props","field","meta","id","name","touched","error","submitNewProduct","productList","values","productExistsInProductList","updateProductInInventory","insertProductIntoInventory","productName","ret","forEach","product","index","incrementAmt","fetch","method","body","res","rest","StyledSelect","select","StyledErrorMessage","div","StyledLabel","IMANewProductForm","console","log","inventory","map","val","price","qty","object","string","max","required","number","setSubmitting","resetForm","setTimeout","alert","errors","handleReset","setFieldValue"],"mappings":"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","sourcesContent":["import { Formik, Form, useField, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nfunction submitNewProduct(productList, values) {\r\n  //check if customer already exists by Name. if not add new with email if exists.\r\n  if(productExistsInProductList(productList, values['name'])) {\r\n    updateProductInInventory(values['name'], values['qty'])\r\n  } else {\r\n    insertProductIntoInventory(values); \r\n  }\r\n}\r\n\r\nfunction productExistsInProductList(productList, productName) {\r\n  var ret = null\r\n  productList.forEach((product, index) => {\r\n    if(product.name === productName) {\r\n      ret = true;\r\n    }\r\n  })\r\n  return ret;\r\n}\r\n\r\nconst updateProductInInventory = async (name, incrementAmt) => {\r\n  const res = await fetch('http://localhost:3000/api/inventoryUpdate', {\r\n    method: 'post',\r\n    body: JSON.stringify({ name: name, incrementAmt: incrementAmt })\r\n  })\r\n}\r\n\r\nconst insertProductIntoInventory = async (product) => {\r\n  const rest = await fetch('http://localhost:3000/api/inventory', {\r\n    method:'post',\r\n    body: JSON.stringify(product)\r\n  })\r\n}\r\n\r\n// Styled components ....\r\nconst StyledSelect = styled.select`\r\n    color: var(--blue);\r\n  `;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n    font-size: 12px;\r\n    color: var(--red-600);\r\n    width: 400px;\r\n    margin-top: 0.25rem;\r\n    &:before {\r\n      content: \"❌ \";\r\n      font-size: 10px;\r\n    }\r\n    @media (prefers-color-scheme: dark) {\r\n      color: var(--red-300);\r\n    }\r\n  `;\r\n\r\nconst StyledLabel = styled.label`\r\n    margin-top: 1rem;\r\n  `;\r\n\r\n\r\nconst IMANewProductForm = props => {\r\n  console.log(JSON.stringify(props.inventory.map(\r\n    function (val, index) {\r\n      return { name: val.name }\r\n    })));\r\n  return (\r\n    <>\r\n      <h1>Add New Product</h1>\r\n      <Formik\r\n        initialValues={{\r\n          name: \"\",\r\n          price: \"\",\r\n          qty: \"\",\r\n          }}\r\n        validationSchema={Yup.object({\r\n          name: Yup.string()\r\n            .max(15, \"Must be 15 characters or less\")\r\n            .required(\"Required\"),\r\n          price: Yup.number()\r\n            .required(\"Required\"),\r\n          qty: Yup.number()\r\n            .required(\"Required\"),\r\n        })}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          console.log(\"new product submitted\" + JSON.stringify(values));\r\n          resetForm({});\r\n          setTimeout(() => {\r\n            submitNewProduct(props.productList, values);\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n          }, 400);\r\n        }}\r\n      >\r\n        {({ values, errors, touched, handleReset, setFieldValue }) => {\r\n          return (\r\n            <Form>\r\n              <MyTextInput\r\n                label=\"Product Name\"\r\n                name=\"name\"\r\n                type=\"text\"\r\n              />\r\n              <MyTextInput\r\n                label=\"Product Price\"\r\n                name=\"price\"\r\n                type=\"number\"\r\n              />\r\n              <MyTextInput\r\n                label=\"Quantity in Stock\"\r\n                name=\"number\"\r\n                type=\"number\"\r\n              />\r\n              <button type=\"submit\">Submit</button>\r\n            </Form>\r\n          )\r\n        }}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IMANewProductForm;"]},"metadata":{},"sourceType":"module"}