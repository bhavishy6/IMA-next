{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\IMATable.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Table.js\nimport { useTable } from \"react-table\";\nexport default function IMATable(_ref) {\n  var columns = _ref.columns,\n      data = _ref.data,\n      filterInput = _ref.filterInput,\n      setFilterInput = _ref.setFilterInput;\n\n  // Use the useTable Hook to send the columns and data to build the table\n  // Use the useTable Hook to send the columns and data to build the table\n  var _useTable = useTable({\n    columns: columns,\n    data: data\n  }, useFilters),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      prepareRow = _useTable.prepareRow,\n      setFilter = _useTable.setFilter;\n\n  var handleFilterChange = function handleFilterChange(e) {\n    var value = e.target.value || undefined;\n    setFilter(\"name\", value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value\n\n    setFilterInput(value);\n  }; // Input element\n\n\n  __jsx(\"input\", {\n    value: filterInput,\n    onChange: handleFilterChange,\n    placeholder: \"Search name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  });\n  /* \r\n    Render the UI for your table\r\n    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n  */\n\n\n  return __jsx(\"table\", _extends({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), headerGroup.headers.map(function (column) {\n      return __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), column.render(\"Header\"));\n    }));\n  })), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), rows.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), row.cells.map(function (cell) {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), cell.render(\"Cell\"));\n    }));\n  })));\n}","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/IMATable.js"],"names":["useTable","IMATable","columns","data","filterInput","setFilterInput","useFilters","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","handleFilterChange","e","value","target","undefined","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":";;;;AAAA;AACA,SAASA,QAAT,QAAyB,aAAzB;AAEA,eAAe,SAASC,QAAT,OAAkE;AAAA,MAA9CC,OAA8C,QAA9CA,OAA8C;AAAA,MAArCC,IAAqC,QAArCA,IAAqC;AAAA,MAA/BC,WAA+B,QAA/BA,WAA+B;AAAA,MAAlBC,cAAkB,QAAlBA,cAAkB;;AAAC;AAC9E;AAD6E,kBASzEL,QAAQ,CAAC;AACTE,IAAAA,OAAO,EAAPA,OADS;AAETC,IAAAA,IAAI,EAAJA;AAFS,GAAD,EAIZG,UAJY,CATiE;AAAA,MAGzEC,aAHyE,aAGzEA,aAHyE;AAAA,MAIzEC,iBAJyE,aAIzEA,iBAJyE;AAAA,MAKzEC,YALyE,aAKzEA,YALyE;AAAA,MAMzEC,IANyE,aAMzEA,IANyE;AAAA,MAOzEC,UAPyE,aAOzEA,UAPyE;AAAA,MAQzEC,SARyE,aAQzEA,SARyE;;AAgB7E,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,CAAC,EAAI;AAC5B,QAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAT,IAAkBE,SAAhC;AACAL,IAAAA,SAAS,CAAC,MAAD,EAASG,KAAT,CAAT,CAF4B,CAEF;;AAC1BV,IAAAA,cAAc,CAACU,KAAD,CAAd;AACD,GAJH,CAhB6E,CAsB3E;;;AACA;AACE,IAAA,KAAK,EAAEX,WADT;AAEE,IAAA,QAAQ,EAAES,kBAFZ;AAGE,IAAA,WAAW,EAAE,aAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKF;;;;;;AAIA,SACI,4BAAWN,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,YAAY,CAACS,GAAb,CAAiB,UAAAC,WAAW;AAAA,WACzB,yBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACKD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwB,UAAAI,MAAM;AAAA,aAC3B,yBAAQA,MAAM,CAACC,cAAP,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAkCD,MAAM,CAACE,MAAP,CAAc,QAAd,CAAlC,CAD2B;AAAA,KAA9B,CADL,CADyB;AAAA,GAA5B,CADL,CADJ,EAUI,4BAAWhB,iBAAiB,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKE,IAAI,CAACQ,GAAL,CAAS,UAACO,GAAD,EAAMC,CAAN,EAAY;AAClBf,IAAAA,UAAU,CAACc,GAAD,CAAV;AACA,WACI,yBAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACKF,GAAG,CAACG,KAAJ,CAAUV,GAAV,CAAc,UAAAW,IAAI,EAAI;AACnB,aAAO,yBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA8BD,IAAI,CAACL,MAAL,CAAY,MAAZ,CAA9B,CAAP;AACH,KAFA,CADL,CADJ;AAOH,GATA,CADL,CAVJ,CADJ;AAyBH","sourcesContent":["// Table.js\r\nimport { useTable } from \"react-table\";\r\n\r\nexport default function IMATable({ columns, data, filterInput, setFilterInput }) {// Use the useTable Hook to send the columns and data to build the table\r\n    // Use the useTable Hook to send the columns and data to build the table\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups if your table have groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow, // Prepare the row (this function need to called for each row before getting the row props)\r\n        setFilter \r\n    } = useTable({\r\n        columns,\r\n        data\r\n    }, \r\n    useFilters \r\n    );\r\n\r\n    const handleFilterChange = e => {\r\n        const value = e.target.value || undefined;\r\n        setFilter(\"name\", value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value\r\n        setFilterInput(value);\r\n      };\r\n      \r\n      // Input element\r\n      <input\r\n        value={filterInput}\r\n        onChange={handleFilterChange}\r\n        placeholder={\"Search name\"}\r\n      />\r\n    /* \r\n      Render the UI for your table\r\n      - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n    */\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}