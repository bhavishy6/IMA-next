{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\forms\\\\IMANewSaleForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"@emotion/styled\";\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nconst MyTextInput = (_ref) => {\n  let {\n    label\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nconst MySelect = (_ref2) => {\n  let {\n    label\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(StyledLabel, {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, label), __jsx(StyledSelect, _extends({}, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(StyledErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nconst MyDateInput = (_ref3) => {\n  let {\n    label\n  } = _ref3,\n      props = _objectWithoutProperties(_ref3, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nfunction submitNewSale(values) {\n  var totalPrice = 0;\n  values.quantities.forEach((product, index) => {\n    var productPrice = getProductFromProductList(product.name).price;\n  }, values.quantities);\n  console.log(JSON.stringify(values)); //calculate totalPrice of sale\n  //add entry to Sales collection in Mongo.\n  //check if customer already exists by Name. if not add new with email if exists.\n\n  values['quantities'].forEach((product, index) => {\n    updateProductInInventory(product['name'], product['qty']);\n  });\n}\n\nfunction getProductFromProductList(productName) {\n  var ret = null;\n  props.productList.forEach((product, index) => {\n    if (product.name === productName) {\n      ret = product;\n    }\n  });\n  return ret;\n}\n\nconst updateProductInInventory = async (name, incrementAmt) => {\n  const res = await fetch('http://localhost:3000/api/inventoryUpdate', {\n    method: 'post',\n    body: JSON.stringify({\n      name: name,\n      incrementAmt: incrementAmt\n    })\n  });\n}; // Styled components ....\n\n\nconst StyledSelect = styled.select`\n    color: var(--blue);\n  `;\nconst StyledErrorMessage = styled.div`\n    font-size: 12px;\n    color: var(--red-600);\n    width: 400px;\n    margin-top: 0.25rem;\n    &:before {\n      content: \"❌ \";\n      font-size: 10px;\n    }\n    @media (prefers-color-scheme: dark) {\n      color: var(--red-300);\n    }\n  `;\nconst StyledLabel = styled.label`\n    margin-top: 1rem;\n  `;\n\nconst IMANewSaleForm = props => {\n  console.log(JSON.stringify(props.productList.map(function (val, index) {\n    return {\n      name: val.name\n    };\n  })));\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"Add New Sale\"), __jsx(Formik, {\n    initialValues: {\n      customerName: \"\",\n      date: \"\",\n      customerEmail: \"\",\n      quantities: [{}] // added for our select\n\n    },\n    validationSchema: Yup.object({\n      customerName: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n      date: Yup.date().required(\"Required\"),\n      customerEmail: Yup.string().email(\"Invalid email address\"),\n      quantities: Yup.array().of(Yup.object().shape({\n        name: Yup.string().required('Required'),\n        qty: Yup.number().min(0, 'Must be atleast 1').required('Required')\n      })).required('Must have products sold').min(1, 'Minimum of 1 product')\n    }),\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      console.log(\"submitted\" + JSON.stringify(values));\n      setTimeout(() => {\n        submitNewSale(values);\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, ({\n    values,\n    errors,\n    touched,\n    handleReset,\n    setFieldValue\n  }) => {\n    return __jsx(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, __jsx(MyTextInput, {\n      label: \"Customer Name\",\n      name: \"customerName\",\n      type: \"text\",\n      placeholder: \"John Doe\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), __jsx(MyDateInput, {\n      label: \"Date of Sale\",\n      name: \"date\",\n      type: \"date\",\n      placeholder: moment(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), __jsx(MyTextInput, {\n      label: \"Customer Email Address\",\n      name: \"customerEmail\",\n      type: \"email\",\n      placeholder: \"jane@doe.com\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Add Products Bought\"), __jsx(FieldArray, {\n      name: \"quantities\",\n      render: arrayHelpers => __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, values.quantities.length > 0 && values.quantities.map((product, index) => __jsx(\"div\", {\n        className: \"row\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        htmlFor: `quantities.${index}.name`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Name\"), __jsx(MySelect, {\n        label: \"Product Name\",\n        name: `quantities.${index}.name`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, __jsx(\"option\", {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Select a product\"), props.productList.map(product => __jsx(\"option\", {\n        key: product.name,\n        value: product.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, product.name + \" ($\" + product.price + \")\")))), __jsx(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, __jsx(\"label\", {\n        htmlFor: `quantities.${index}.qty`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \" Quantity\"), __jsx(MyTextInput, {\n        name: `quantities.${index}.qty`,\n        placeholder: \"99999\",\n        type: \"number\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, __jsx(\"button\", {\n        className: \"secondary\",\n        type: \"remove\",\n        onClick: () => arrayHelpers.remove(index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"X\")))), __jsx(\"button\", {\n        type: \"add\",\n        className: \"secondary\",\n        onClick: () => arrayHelpers.push({\n          name: \"\",\n          qty: \"\"\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Add Product\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"Submit\"));\n  }));\n};\n\nexport default IMANewSaleForm;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/forms/IMANewSaleForm.js"],"names":["Formik","Form","useField","FieldArray","Yup","styled","moment","require","format","MyTextInput","label","props","field","meta","id","name","touched","error","MySelect","MyDateInput","submitNewSale","values","totalPrice","quantities","forEach","product","index","productPrice","getProductFromProductList","price","console","log","JSON","stringify","updateProductInInventory","productName","ret","productList","incrementAmt","res","fetch","method","body","StyledSelect","select","StyledErrorMessage","div","StyledLabel","IMANewSaleForm","map","val","customerName","date","customerEmail","object","string","max","required","email","array","of","shape","qty","number","min","setSubmitting","setTimeout","alert","errors","handleReset","setFieldValue","arrayHelpers","length","remove","push"],"mappings":"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","sourcesContent":["import { Formik, Form, useField, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MySelect = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n      <StyledSelect {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MyDateInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nfunction submitNewSale(values) {\r\n  var totalPrice = 0;\r\n  values.quantities.forEach((product, index)=> {\r\n    var productPrice = getProductFromProductList(product.name).price;\r\n\r\n  }, values.quantities );\r\n  console.log(JSON.stringify(values))\r\n  //calculate totalPrice of sale\r\n  //add entry to Sales collection in Mongo.\r\n  //check if customer already exists by Name. if not add new with email if exists.\r\n  values['quantities'].forEach((product, index) => {\r\n    updateProductInInventory(product['name'], product['qty'])\r\n  })\r\n}\r\n\r\nfunction getProductFromProductList(productName) {\r\n  var ret = null\r\n  props.productList.forEach((product, index) => {\r\n    if(product.name === productName) {\r\n      ret = product;\r\n    }\r\n  })\r\n  return ret;\r\n}\r\n\r\nconst updateProductInInventory = async (name, incrementAmt) => {\r\n  const res = await fetch('http://localhost:3000/api/inventoryUpdate', {\r\n    method: 'post',\r\n    body: JSON.stringify({ name: name, incrementAmt: incrementAmt })\r\n  })\r\n}\r\n\r\n// Styled components ....\r\nconst StyledSelect = styled.select`\r\n    color: var(--blue);\r\n  `;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n    font-size: 12px;\r\n    color: var(--red-600);\r\n    width: 400px;\r\n    margin-top: 0.25rem;\r\n    &:before {\r\n      content: \"❌ \";\r\n      font-size: 10px;\r\n    }\r\n    @media (prefers-color-scheme: dark) {\r\n      color: var(--red-300);\r\n    }\r\n  `;\r\n\r\nconst StyledLabel = styled.label`\r\n    margin-top: 1rem;\r\n  `;\r\n\r\n\r\nconst IMANewSaleForm = props => {\r\n  console.log(JSON.stringify(props.productList.map(\r\n    function (val, index) {\r\n      return { name: val.name }\r\n    })));\r\n  return (\r\n    <>\r\n      <h1>Add New Sale</h1>\r\n      <Formik\r\n        initialValues={{\r\n          customerName: \"\",\r\n          date: \"\",\r\n          customerEmail: \"\",\r\n          quantities: [{}] // added for our select\r\n        }}\r\n        validationSchema={Yup.object({\r\n          customerName: Yup.string()\r\n            .max(15, \"Must be 15 characters or less\")\r\n            .required(\"Required\"),\r\n          date: Yup.date()\r\n            .required(\"Required\"),\r\n          customerEmail: Yup.string()\r\n            .email(\"Invalid email address\"),\r\n          quantities: Yup.array()\r\n            .of(\r\n              Yup.object().shape({\r\n                name: Yup.string()\r\n                  .required('Required'),\r\n                qty: Yup.number()\r\n                  .min(0, 'Must be atleast 1')\r\n                  .required('Required'),\r\n              })\r\n            ).required('Must have products sold')\r\n            .min(1, 'Minimum of 1 product'),\r\n        })}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          console.log(\"submitted\" + JSON.stringify(values));\r\n          setTimeout(() => {\r\n            submitNewSale(values);\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n          }, 400);\r\n        }}\r\n      >\r\n        {({ values, errors, touched, handleReset, setFieldValue }) => {\r\n          return (\r\n            <Form>\r\n              <MyTextInput\r\n                label=\"Customer Name\"\r\n                name=\"customerName\"\r\n                type=\"text\"\r\n                placeholder=\"John Doe\"\r\n              />\r\n              <MyDateInput\r\n                label=\"Date of Sale\"\r\n                name=\"date\"\r\n                type=\"date\"\r\n                placeholder={moment()}\r\n              />\r\n              <MyTextInput\r\n                label=\"Customer Email Address\"\r\n                name=\"customerEmail\"\r\n                type=\"email\"\r\n                placeholder=\"jane@doe.com\"\r\n              />\r\n              <h3>Add Products Bought</h3>\r\n              <FieldArray\r\n                name=\"quantities\"\r\n                render={arrayHelpers => (\r\n                  <div>\r\n                    {values.quantities.length > 0 &&\r\n                      values.quantities.map((product, index) => (\r\n                        <div className=\"row\" key={index}>\r\n                          <div className=\"col\">\r\n                            <label htmlFor={`quantities.${index}.name`}>Name</label>\r\n                            <MySelect label=\"Product Name\" name={`quantities.${index}.name`}>\r\n                              <option value=\"\">Select a product</option>\r\n                              {props.productList.map(product => <option key={product.name} value={product.name}>{product.name + \" ($\"+ product.price +\")\"}</option>)}\r\n\r\n                            </MySelect>\r\n                          </div>\r\n                          <div className=\"col\">\r\n                            <label htmlFor={`quantities.${index}.qty`}> Quantity</label>\r\n                            <MyTextInput\r\n                              name={`quantities.${index}.qty`}\r\n                              placeholder=\"99999\"\r\n                              type=\"number\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"col\">\r\n                            <button\r\n                              className=\"secondary\"\r\n                              type=\"remove\"\r\n                              onClick={() => arrayHelpers.remove(index)}\r\n                            >\r\n                              X\r\n                      </button>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    <button\r\n                      type=\"add\"\r\n                      className=\"secondary\"\r\n                      onClick={() => arrayHelpers.push({ name: \"\", qty: \"\" })}\r\n                    >\r\n                      Add Product\r\n              </button>\r\n                  </div>\r\n                )}\r\n              />\r\n\r\n              <button type=\"submit\">Submit</button>\r\n            </Form>\r\n          )\r\n        }}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IMANewSaleForm;"]},"metadata":{},"sourceType":"module"}