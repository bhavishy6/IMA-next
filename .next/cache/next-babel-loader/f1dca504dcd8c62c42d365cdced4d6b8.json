{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\IMATable.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Table.js\nimport { useTable } from \"react-table\";\nexport default function IMATable(_ref) {\n  var columns = _ref.columns,\n      data = _ref.data;\n\n  // Use the useTable Hook to send the columns and data to build the table\n  // Use the useTable Hook to send the columns and data to build the table\n  var _useTable = useTable({\n    columns: columns,\n    data: data\n  }),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      prepareRow = _useTable.prepareRow;\n  /* \r\n    Render the UI for your table\r\n    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n  */\n\n\n  return __jsx(\"table\", _extends({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, headerGroups.map(function (headerGroup) {\n    return __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }), headerGroup.headers.map(function (column) {\n      return __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }), column.render(\"Header\"));\n    }));\n  })), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }), rows.map(function (row, i) {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), row.cells.map(function (cell) {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), cell.render(\"Cell\"));\n    }));\n  })));\n}","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/IMATable.js"],"names":["useTable","IMATable","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":";;;;AAAA;AACA,SAASA,QAAT,QAAyB,aAAzB;AAEA,eAAe,SAASC,QAAT,OAAqC;AAAA,MAAjBC,OAAiB,QAAjBA,OAAiB;AAAA,MAARC,IAAQ,QAARA,IAAQ;;AAAC;AACjD;AADgD,kBAQ5CH,QAAQ,CAAC;AACTE,IAAAA,OAAO,EAAPA,OADS;AAETC,IAAAA,IAAI,EAAJA;AAFS,GAAD,CARoC;AAAA,MAG5CC,aAH4C,aAG5CA,aAH4C;AAAA,MAI5CC,iBAJ4C,aAI5CA,iBAJ4C;AAAA,MAK5CC,YAL4C,aAK5CA,YAL4C;AAAA,MAM5CC,IAN4C,aAM5CA,IAN4C;AAAA,MAO5CC,UAP4C,aAO5CA,UAP4C;AAahD;;;;;;AAIA,SACI,4BAAWJ,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKE,YAAY,CAACG,GAAb,CAAiB,UAAAC,WAAW;AAAA,WACzB,yBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACKD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwB,UAAAI,MAAM;AAAA,aAC3B,yBAAQA,MAAM,CAACC,cAAP,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAkCD,MAAM,CAACE,MAAP,CAAc,QAAd,CAAlC,CAD2B;AAAA,KAA9B,CADL,CADyB;AAAA,GAA5B,CADL,CADJ,EAUI,4BAAWV,iBAAiB,EAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKE,IAAI,CAACE,GAAL,CAAS,UAACO,GAAD,EAAMC,CAAN,EAAY;AAClBT,IAAAA,UAAU,CAACQ,GAAD,CAAV;AACA,WACI,yBAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACKF,GAAG,CAACG,KAAJ,CAAUV,GAAV,CAAc,UAAAW,IAAI,EAAI;AACnB,aAAO,yBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA8BD,IAAI,CAACL,MAAL,CAAY,MAAZ,CAA9B,CAAP;AACH,KAFA,CADL,CADJ;AAOH,GATA,CADL,CAVJ,CADJ;AAyBH","sourcesContent":["// Table.js\r\nimport { useTable } from \"react-table\";\r\n\r\nexport default function IMATable({ columns, data }) {// Use the useTable Hook to send the columns and data to build the table\r\n    // Use the useTable Hook to send the columns and data to build the table\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups if your table have groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow // Prepare the row (this function need to called for each row before getting the row props)\r\n    } = useTable({\r\n        columns,\r\n        data\r\n    });\r\n\r\n    /* \r\n      Render the UI for your table\r\n      - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n    */\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}