{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport IMALayout from '../components/IMALayout';\nimport IMARecentSalesChart from '../components/IMARecentSalesChart';\nimport fetch from 'isomorphic-unfetch';\nimport IMANewSaleForm from '../components/forms/IMANewSaleForm';\nimport { Component } from 'react';\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      productList: [],\n      recentSalesByDateDict: [],\n      isLoading: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchInventory\", function _callee() {\n      var inventory, inventoryjson;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/inventory'));\n\n            case 2:\n              inventory = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(inventory.json());\n\n            case 5:\n              inventoryjson = _context.sent;\n              return _context.abrupt(\"return\", inventoryjson);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchRecentSales\", function _callee2(daysAgo) {\n      var sales, salesjson;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo));\n\n            case 2:\n              sales = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(sales.json());\n\n            case 5:\n              salesjson = _context2.sent;\n              return _context2.abrupt(\"return\", salesjson);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Dashboard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var salesDict = [];\n\n      var _asyncMostRecentSales = fetchRecentSales(30).then(function (externalData) {\n        salesDict = getMostRecentSalesDict(externalData);\n        salesDict = getMostRecentSalesNIVO(salesDict);\n      });\n\n      var productList = [];\n\n      var _asyncInventory = fetchInventory().then(function (externalData) {\n        productList = inventoryjson;\n      });\n\n      this.setState({\n        productList: productList,\n        recentSalesByDateDict: salesDict,\n        isLoading: false\n      });\n    }\n  }, {\n    key: \"getMostRecentSalesDict\",\n    value: function getMostRecentSalesDict(sales) {\n      console.log(\"mrd\" + _JSON$stringify(sales));\n      var recentSales = {};\n      sales.forEach(function (sale, index) {\n        var date = moment(sale[\"date\"]).format(\"L\");\n        console.log(\"checking dateL : \" + date);\n        var quantities = sale[\"quantities\"];\n\n        if (recentSales[date]) {\n          console.log('this date exists' + date);\n          recentSales[date].forEach(function (product, index) {\n            var sameProduct = findProductInQuantities(product[\"name\"], quantities);\n\n            if (sameProduct === null) {} else {\n              product[\"qty\"] += sameProduct[\"qty\"];\n            }\n          }, recentSales[date]);\n        } else {\n          //this date does not yet exist in recentSales\n          recentSales[date] = sale[\"quantities\"];\n        }\n      });\n      console.log(_JSON$stringify(recentSales));\n      return recentSales;\n    }\n  }, {\n    key: \"getMostRecentSalesNIVO\",\n    value: function getMostRecentSalesNIVO(recentSalesDict) {\n      console.log(\"nivo\" + _JSON$stringify(recentSalesDict));\n      var recentSales = [];\n\n      _Object$keys(recentSalesDict).forEach(function (date, index) {\n        var salesOnDate = recentSalesDict[date];\n        recentSales.push({});\n        recentSales[index]['date'] = date;\n\n        for (var i = 0; i < salesOnDate.length; i++) {\n          recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty'];\n\n          switch (salesOnDate[i]['name']) {\n            case 'Iron Sheet':\n              recentSales[index]['Iron SheetColor'] = \"hsl(129, 70%, 50%)\";\n              break;\n\n            case 'Copper Sheet':\n              recentSales[index]['Copper SheetColor'] = \"hsl(77, 70%, 50%)\";\n              break;\n\n            case 'Free Product':\n              recentSales[index]['Free ProductColor'] = \"hsl(150, 70%, 50%)\";\n              break;\n          }\n        }\n      });\n\n      Dashboard.props['recentSalesLoaded'] = true;\n      return recentSales;\n    }\n  }, {\n    key: \"findProductInQuantities\",\n    value: function findProductInQuantities(name, quantities) {\n      var foundProduct = null;\n      quantities.forEach(function (product, index) {\n        console.log(name + \"checking product name: \" + product['name']);\n\n        if (name == product['name']) {\n          foundProduct = product;\n        }\n      });\n      return foundProduct;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(IMALayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"form to add new sale form to add new customer form to add new inventory item1\", __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"recent sales since 30 days ago: \", _JSON$stringify(props.recentSalesByDateDict)), __jsx(\"div\", {\n        style: {\n          height: 500 + \"px\",\n          width: 500 + 'px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, __jsx(IMARecentSalesChart, {\n        data: props.recentSalesByDateDict,\n        isLoaded: props.recentSalesLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }))), __jsx(IMANewSaleForm, {\n        productList: props.productList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Dashboard;\n}(Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/pages/index.js"],"names":["IMALayout","IMARecentSalesChart","fetch","IMANewSaleForm","Component","moment","require","format","Dashboard","productList","recentSalesByDateDict","isLoading","inventory","json","inventoryjson","daysAgo","sales","salesjson","salesDict","_asyncMostRecentSales","fetchRecentSales","then","externalData","getMostRecentSalesDict","getMostRecentSalesNIVO","_asyncInventory","fetchInventory","setState","console","log","recentSales","forEach","sale","index","date","quantities","product","sameProduct","findProductInQuantities","recentSalesDict","salesOnDate","push","i","length","props","name","foundProduct","height","width","recentSalesLoaded"],"mappings":"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","sourcesContent":["import IMALayout from '../components/IMALayout'\r\nimport IMARecentSalesChart from '../components/IMARecentSalesChart'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport IMANewSaleForm from '../components/forms/IMANewSaleForm';\r\nimport { Component } from 'react';\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\nclass Dashboard extends Component {\r\n    state = {\r\n        productList: [],\r\n        recentSalesByDateDict: [],\r\n        isLoading: true\r\n    }\r\n    componentDidMount() {\r\n        var salesDict = []\r\n        var _asyncMostRecentSales = fetchRecentSales(30).then(externalData => {\r\n            salesDict = getMostRecentSalesDict(externalData);\r\n            salesDict = getMostRecentSalesNIVO(salesDict);\r\n        })\r\n\r\n        var productList = []\r\n        var _asyncInventory = fetchInventory().then(externalData => {\r\n            productList = inventoryjson;\r\n        });\r\n\r\n        this.setState({\r\n            productList: productList,\r\n            recentSalesByDateDict: salesDict,\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    fetchInventory = async () => {\r\n        const inventory = await fetch('http://localhost:3000/api/inventory')\r\n        const inventoryjson = await inventory.json()\r\n        return inventoryjson;\r\n    }\r\n\r\n    fetchRecentSales = async (daysAgo) => {\r\n        const sales = await fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo)\r\n        const salesjson = await sales.json()\r\n        return salesjson;\r\n    }\r\n\r\n    getMostRecentSalesDict(sales) {\r\n        console.log(\"mrd\" + JSON.stringify(sales))\r\n        var recentSales = {}\r\n        sales.forEach((sale, index) => {\r\n            var date = moment(sale[\"date\"]).format(\"L\")\r\n            console.log(\"checking dateL : \" + date)\r\n            var quantities = sale[\"quantities\"]\r\n            if (recentSales[date]) {\r\n                console.log('this date exists' + date)\r\n                recentSales[date].forEach((product, index) => {\r\n                    var sameProduct = findProductInQuantities(product[\"name\"], quantities)\r\n                    if (sameProduct === null) {\r\n\r\n                    } else {\r\n                        product[\"qty\"] += sameProduct[\"qty\"]\r\n                    }\r\n                }, recentSales[date])\r\n            } else {\r\n                //this date does not yet exist in recentSales\r\n                recentSales[date] = sale[\"quantities\"]\r\n            }\r\n        })\r\n        console.log(JSON.stringify(recentSales))\r\n        return recentSales;\r\n    };\r\n\r\n    getMostRecentSalesNIVO(recentSalesDict) {\r\n        console.log(\"nivo\" + JSON.stringify(recentSalesDict))\r\n        var recentSales = []\r\n        Object.keys(recentSalesDict).forEach(function (date, index) {\r\n            var salesOnDate = recentSalesDict[date]\r\n            recentSales.push({})\r\n            recentSales[index]['date'] = date\r\n            for (var i = 0; i < salesOnDate.length; i++) {\r\n                recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty']\r\n                switch (salesOnDate[i]['name']) {\r\n                    case 'Iron Sheet':\r\n                        recentSales[index]['Iron SheetColor'] = \"hsl(129, 70%, 50%)\";\r\n                        break;\r\n                    case 'Copper Sheet':\r\n                        recentSales[index]['Copper SheetColor'] = \"hsl(77, 70%, 50%)\";\r\n                        break;\r\n                    case 'Free Product':\r\n                        recentSales[index]['Free ProductColor'] = \"hsl(150, 70%, 50%)\";\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n        Dashboard.props['recentSalesLoaded'] = true;\r\n        return recentSales;\r\n    }\r\n\r\n    findProductInQuantities(name, quantities) {\r\n        var foundProduct = null;\r\n        quantities.forEach((product, index) => {\r\n            console.log(name + \"checking product name: \" + product['name'])\r\n            if (name == product['name']) {\r\n                foundProduct = product;\r\n            }\r\n        });\r\n        return foundProduct;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <IMALayout>\r\n                <div >\r\n                    form to add new sale\r\n                    form to add new customer\r\n                    form to add new inventory item1\r\n                <p>recent sales since 30 days ago: {JSON.stringify(props.recentSalesByDateDict)}</p>\r\n\r\n                    <div style={{ height: 500 + \"px\", width: 500 + 'px' }}>\r\n                        <IMARecentSalesChart data={props.recentSalesByDateDict} isLoaded={props.recentSalesLoaded} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <IMANewSaleForm productList={props.productList} />\r\n            </IMALayout>\r\n\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}