{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport IMALayout from '../components/IMALayout';\nimport IMARecentSalesChart from '../components/IMARecentSalesChart';\nimport fetch from 'isomorphic-unfetch';\nimport IMANewSaleForm from '../components/forms/IMANewSaleForm';\nimport { Component } from 'react';\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getInitialProps\", async ctx => {\n      var salesDict = [];\n\n      var _asyncMostRecentSales = fetchRecentSales(30).then(externalData => {\n        salesDict = getMostRecentSalesDict(externalData);\n        salesDict = getMostRecentSalesNIVO(salesDict);\n      });\n\n      const inventory = await fetch('http://localhost:3000/api/inventory');\n      const inventoryjson = await inventory.json();\n      var productList = inventoryjson;\n      return {\n        productList: productList,\n        recentSalesByDateDict: salesDict\n      };\n    });\n\n    _defineProperty(this, \"fetchRecentSales\", async daysAgo => {\n      const sales = await fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo);\n      const salesjson = await sales.json();\n      return salesjson;\n    });\n  }\n\n  getMostRecentSalesDict(sales) {\n    console.log(\"mrd\" + JSON.stringify(sales));\n    var recentSales = {};\n    sales.forEach((sale, index) => {\n      var date = moment(sale[\"date\"]).format(\"L\");\n      console.log(\"checking dateL : \" + date);\n      var quantities = sale[\"quantities\"];\n\n      if (recentSales[date]) {\n        console.log('this date exists' + date);\n        recentSales[date].forEach((product, index) => {\n          var sameProduct = findProductInQuantities(product[\"name\"], quantities);\n\n          if (sameProduct === null) {} else {\n            product[\"qty\"] += sameProduct[\"qty\"];\n          }\n        }, recentSales[date]);\n      } else {\n        //this date does not yet exist in recentSales\n        recentSales[date] = sale[\"quantities\"];\n      }\n    });\n    console.log(JSON.stringify(recentSales));\n    return recentSales;\n  }\n\n  getMostRecentSalesNIVO(recentSalesDict) {\n    console.log(\"nivo\" + JSON.stringify(recentSalesDict));\n    var recentSales = [];\n    Object.keys(recentSalesDict).forEach(function (date, index) {\n      var salesOnDate = recentSalesDict[date];\n      recentSales.push({});\n      recentSales[index]['date'] = date;\n\n      for (var i = 0; i < salesOnDate.length; i++) {\n        recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty'];\n\n        switch (salesOnDate[i]['name']) {\n          case 'Iron Sheet':\n            recentSales[index]['Iron SheetColor'] = \"hsl(129, 70%, 50%)\";\n            break;\n\n          case 'Copper Sheet':\n            recentSales[index]['Copper SheetColor'] = \"hsl(77, 70%, 50%)\";\n            break;\n\n          case 'Free Product':\n            recentSales[index]['Free ProductColor'] = \"hsl(150, 70%, 50%)\";\n            break;\n        }\n      }\n    });\n    Dashboard.props['recentSalesLoaded'] = true;\n    return recentSales;\n  }\n\n  findProductInQuantities(name, quantities) {\n    var foundProduct = null;\n    quantities.forEach((product, index) => {\n      console.log(name + \"checking product name: \" + product['name']);\n\n      if (name == product['name']) {\n        foundProduct = product;\n      }\n    });\n    return foundProduct;\n  }\n\n  render() {\n    return __jsx(IMALayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"form to add new sale form to add new customer form to add new inventory item1\", __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"recent sales since 30 days ago: \", JSON.stringify(props.recentSalesByDateDict)), __jsx(\"div\", {\n      style: {\n        height: 500 + \"px\",\n        width: 500 + 'px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, __jsx(IMARecentSalesChart, {\n      data: props.recentSalesByDateDict,\n      isLoaded: props.recentSalesLoaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }))), __jsx(IMANewSaleForm, {\n      productList: props.productList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/pages/index.js"],"names":["IMALayout","IMARecentSalesChart","fetch","IMANewSaleForm","Component","moment","require","format","Dashboard","ctx","salesDict","_asyncMostRecentSales","fetchRecentSales","then","externalData","getMostRecentSalesDict","getMostRecentSalesNIVO","inventory","inventoryjson","json","productList","recentSalesByDateDict","daysAgo","sales","salesjson","console","log","JSON","stringify","recentSales","forEach","sale","index","date","quantities","product","sameProduct","findProductInQuantities","recentSalesDict","Object","keys","salesOnDate","push","i","length","props","name","foundProduct","render","height","width","recentSalesLoaded"],"mappings":"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","sourcesContent":["import IMALayout from '../components/IMALayout'\r\nimport IMARecentSalesChart from '../components/IMARecentSalesChart'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport IMANewSaleForm from '../components/forms/IMANewSaleForm';\r\nimport { Component } from 'react';\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\nclass Dashboard extends Component {\r\n    getInitialProps = async ctx => {\r\n        var salesDict = []\r\n        var _asyncMostRecentSales = fetchRecentSales(30).then(externalData => {\r\n            salesDict = getMostRecentSalesDict(externalData);\r\n            salesDict = getMostRecentSalesNIVO(salesDict);\r\n        })\r\n        const inventory = await fetch('http://localhost:3000/api/inventory')\r\n        const inventoryjson = await inventory.json()\r\n        var productList = inventoryjson\r\n        return {\r\n            productList: productList,\r\n            recentSalesByDateDict: salesDict\r\n        };\r\n    }\r\n    fetchRecentSales = async (daysAgo) => {\r\n        const sales = await fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo)\r\n        const salesjson = await sales.json()\r\n        return salesjson;\r\n    }\r\n\r\n    getMostRecentSalesDict(sales) {\r\n        console.log(\"mrd\" + JSON.stringify(sales))\r\n        var recentSales = {}\r\n        sales.forEach((sale, index) => {\r\n            var date = moment(sale[\"date\"]).format(\"L\")\r\n            console.log(\"checking dateL : \" + date)\r\n            var quantities = sale[\"quantities\"]\r\n            if (recentSales[date]) {\r\n                console.log('this date exists' + date)\r\n                recentSales[date].forEach((product, index) => {\r\n                    var sameProduct = findProductInQuantities(product[\"name\"], quantities)\r\n                    if (sameProduct === null) {\r\n\r\n                    } else {\r\n                        product[\"qty\"] += sameProduct[\"qty\"]\r\n                    }\r\n                }, recentSales[date])\r\n            } else {\r\n                //this date does not yet exist in recentSales\r\n                recentSales[date] = sale[\"quantities\"]\r\n            }\r\n        })\r\n        console.log(JSON.stringify(recentSales))\r\n        return recentSales;\r\n    };\r\n\r\n    getMostRecentSalesNIVO(recentSalesDict) {\r\n        console.log(\"nivo\" + JSON.stringify(recentSalesDict))\r\n        var recentSales = []\r\n        Object.keys(recentSalesDict).forEach(function (date, index) {\r\n            var salesOnDate = recentSalesDict[date]\r\n            recentSales.push({})\r\n            recentSales[index]['date'] = date\r\n            for (var i = 0; i < salesOnDate.length; i++) {\r\n                recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty']\r\n                switch (salesOnDate[i]['name']) {\r\n                    case 'Iron Sheet':\r\n                        recentSales[index]['Iron SheetColor'] = \"hsl(129, 70%, 50%)\";\r\n                        break;\r\n                    case 'Copper Sheet':\r\n                        recentSales[index]['Copper SheetColor'] = \"hsl(77, 70%, 50%)\";\r\n                        break;\r\n                    case 'Free Product':\r\n                        recentSales[index]['Free ProductColor'] = \"hsl(150, 70%, 50%)\";\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n        Dashboard.props['recentSalesLoaded'] = true;\r\n        return recentSales;\r\n    }\r\n\r\n    findProductInQuantities(name, quantities) {\r\n        var foundProduct = null;\r\n        quantities.forEach((product, index) => {\r\n            console.log(name + \"checking product name: \" + product['name'])\r\n            if (name == product['name']) {\r\n                foundProduct = product;\r\n            }\r\n        });\r\n        return foundProduct;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <IMALayout>\r\n                <div >\r\n                    form to add new sale\r\n                    form to add new customer\r\n                    form to add new inventory item1\r\n                <p>recent sales since 30 days ago: {JSON.stringify(props.recentSalesByDateDict)}</p>\r\n\r\n                    <div style={{ height: 500 + \"px\", width: 500 + 'px' }}>\r\n                        <IMARecentSalesChart data={props.recentSalesByDateDict} isLoaded={props.recentSalesLoaded} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <IMANewSaleForm productList={props.productList} />\r\n            </IMALayout>\r\n\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}