{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport IMALayout from '../components/IMALayout';\nimport IMARecentSalesChart from '../components/IMARecentSalesChart';\nimport fetch from 'isomorphic-unfetch';\n\nvar moment = require('moment');\n\nmoment().format('L');\nvar recent = {\n  \"02/10/2020\": [{\n    \"name\": \"Iron Sheet\",\n    \"qty\": 7,\n    \"price\": 10\n  }, {\n    \"name\": \"Copper Sheet\",\n    \"qty\": 2,\n    \"price\": 9.1\n  }],\n  \"02/09/2020\": [{\n    \"name\": \"Iron Sheet\",\n    \"qty\": 1,\n    \"price\": 10\n  }, {\n    \"name\": \"Copper Sheet\",\n    \"qty\": 1,\n    \"price\": 9.1\n  }]\n};\nvar recentF = [{\n  \"date\": \"02/10/2020\",\n  \"Iron Sheet\": 7,\n  \"Iron SheetColor\": \"hsl(129, 70%, 50%)\",\n  \"Copper Sheet\": 2,\n  \"Copper SheetColor\": \"hsl(77, 70%, 50%)\"\n}, {\n  \"date\": \"02/09/2020\",\n  \"Iron Sheet\": 1,\n  \"Iron SheetColor\": \"hsl(129, 70%, 50%)\",\n  \"Copper Sheet\": 1,\n  \"Copper SheetColor\": \"hsl(77, 70%, 50%)\"\n}];\nvar example = [{\n  \"country\": \"AD\",\n  \"hot dog\": 118,\n  \"hot dogColor\": \"hsl(77, 70%, 50%)\",\n  \"burger\": 138,\n  \"burgerColor\": \"hsl(339, 70%, 50%)\",\n  \"sandwich\": 151,\n  \"sandwichColor\": \"hsl(74, 70%, 50%)\",\n  \"kebab\": 143,\n  \"kebabColor\": \"hsl(228, 70%, 50%)\",\n  \"fries\": 197,\n  \"friesColor\": \"hsl(271, 70%, 50%)\",\n  \"donut\": 150,\n  \"donutColor\": \"hsl(129, 70%, 50%)\"\n}, {\n  \"country\": \"AE\",\n  \"hot dog\": 61,\n  \"hot dogColor\": \"hsl(130, 70%, 50%)\",\n  \"burger\": 137,\n  \"burgerColor\": \"hsl(145, 70%, 50%)\",\n  \"sandwich\": 127,\n  \"sandwichColor\": \"hsl(152, 70%, 50%)\",\n  \"kebab\": 59,\n  \"kebabColor\": \"hsl(9, 70%, 50%)\",\n  \"fries\": 28,\n  \"friesColor\": \"hsl(52, 70%, 50%)\",\n  \"donut\": 169,\n  \"donutColor\": \"hsl(300, 70%, 50%)\"\n}, {\n  \"country\": \"AF\",\n  \"hot dog\": 181,\n  \"hot dogColor\": \"hsl(296, 70%, 50%)\",\n  \"burger\": 188,\n  \"burgerColor\": \"hsl(219, 70%, 50%)\",\n  \"sandwich\": 97,\n  \"sandwichColor\": \"hsl(23, 70%, 50%)\",\n  \"kebab\": 118,\n  \"kebabColor\": \"hsl(277, 70%, 50%)\",\n  \"fries\": 127,\n  \"friesColor\": \"hsl(18, 70%, 50%)\",\n  \"donut\": 72,\n  \"donutColor\": \"hsl(92, 70%, 50%)\"\n}, {\n  \"country\": \"AG\",\n  \"hot dog\": 16,\n  \"hot dogColor\": \"hsl(347, 70%, 50%)\",\n  \"burger\": 27,\n  \"burgerColor\": \"hsl(97, 70%, 50%)\",\n  \"sandwich\": 43,\n  \"sandwichColor\": \"hsl(180, 70%, 50%)\",\n  \"kebab\": 179,\n  \"kebabColor\": \"hsl(285, 70%, 50%)\",\n  \"fries\": 134,\n  \"friesColor\": \"hsl(325, 70%, 50%)\",\n  \"donut\": 187,\n  \"donutColor\": \"hsl(145, 70%, 50%)\"\n}, {\n  \"country\": \"AI\",\n  \"hot dog\": 39,\n  \"hot dogColor\": \"hsl(23, 70%, 50%)\",\n  \"burger\": 82,\n  \"burgerColor\": \"hsl(77, 70%, 50%)\",\n  \"sandwich\": 192,\n  \"sandwichColor\": \"hsl(142, 70%, 50%)\",\n  \"kebab\": 41,\n  \"kebabColor\": \"hsl(360, 70%, 50%)\",\n  \"fries\": 99,\n  \"friesColor\": \"hsl(291, 70%, 50%)\",\n  \"donut\": 12,\n  \"donutColor\": \"hsl(359, 70%, 50%)\"\n}, {\n  \"country\": \"AL\",\n  \"hot dog\": 65,\n  \"hot dogColor\": \"hsl(229, 70%, 50%)\",\n  \"burger\": 54,\n  \"burgerColor\": \"hsl(132, 70%, 50%)\",\n  \"sandwich\": 121,\n  \"sandwichColor\": \"hsl(202, 70%, 50%)\",\n  \"kebab\": 133,\n  \"kebabColor\": \"hsl(58, 70%, 50%)\",\n  \"fries\": 144,\n  \"friesColor\": \"hsl(89, 70%, 50%)\",\n  \"donut\": 26,\n  \"donutColor\": \"hsl(120, 70%, 50%)\"\n}, {\n  \"country\": \"AM\",\n  \"hot dog\": 166,\n  \"hot dogColor\": \"hsl(120, 70%, 50%)\",\n  \"burger\": 165,\n  \"burgerColor\": \"hsl(194, 70%, 50%)\",\n  \"sandwich\": 181,\n  \"sandwichColor\": \"hsl(295, 70%, 50%)\",\n  \"kebab\": 43,\n  \"kebabColor\": \"hsl(128, 70%, 50%)\",\n  \"fries\": 69,\n  \"friesColor\": \"hsl(158, 70%, 50%)\",\n  \"donut\": 133,\n  \"donutColor\": \"hsl(292, 70%, 50%)\"\n}];\n\nvar Dashboard = function Dashboard(props) {\n  console.log('recentSalesByDateMap' + _JSON$stringify(getMostRecentSalesNIVO(props.recentSalesByDateMap)));\n  return __jsx(IMALayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"form to add new sale form to add new customer form to add new inventory item1\", __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"recent sales since 30 days ago: \", _JSON$stringify(props.recentSalesByDateMap)), __jsx(\"div\", {\n    style: {\n      height: 1000 + \"px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  })));\n};\n\nDashboard.getInitialProps = function _callee(ctx) {\n  var res, json, mostRecentSales;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/sales?daysAgo=' + 30));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          json = _context.sent;\n          console.log(\"Show data fetched. \".concat(_JSON$stringify(json)));\n          mostRecentSales = getMostRecentSalesDict(json);\n          console.log(_JSON$stringify(mostRecentSales[0]));\n          return _context.abrupt(\"return\", {\n            recentSalesByDateMap: mostRecentSales\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nfunction getMostRecentSalesDict(sales) {\n  var recentSales = {};\n  sales.forEach(function (sale, index) {\n    console.log(index + \":\" + sale[\"date\"]);\n    var date = moment(sale[\"date\"]).format(\"L\");\n    var quantities = sale[\"quantities\"]; // console.log(JSON.stringify(quantities))\n\n    if (recentSales[date]) {\n      console.log('this date exists' + date);\n      recentSales[date].forEach(function (product, index) {\n        // console.log(\"existing product name for this day: \" + product['name'])\n        var sameProduct = findProductInQuantities(product[\"name\"], quantities);\n        console.log(_JSON$stringify(sameProduct));\n\n        if (sameProduct === null) {} else {\n          // console.log(\"found same product: \" + JSON.stringify(product) + product['qty'] +\"+\\n \" + JSON.stringify(sameProduct))\n          product[\"qty\"] += sameProduct[\"qty\"];\n        }\n      }, recentSales[date]);\n    } else {\n      //this date does not yet exist in recentSales\n      recentSales[date] = sale[\"quantities\"];\n    }\n  });\n  console.log(\"map:  \" + _JSON$stringify(recentSales) + \"232323\");\n  return recentSales;\n}\n\n;\n\nfunction getMostRecentSalesNIVO(recentSalesDict) {\n  var recentSales = [];\n\n  _Object$keys(recentSalesDict).forEach(function (date, index) {\n    var salesOnDate = recentSalesDict[date];\n    recentSales.push({});\n    recentSales[index]['date'] = date; // console.log(date + \" \" + JSON.stringify(salesOnDate));\n\n    for (var i = 0; i < salesOnDate.length; i++) {\n      recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty'];\n    }\n  });\n\n  console.log(\"recentNIVO: \" + _JSON$stringify(recentSales));\n  return recentSales;\n}\n\nfunction findProductInQuantities(name, quantities) {\n  var foundProduct = null;\n  quantities.forEach(function (product, index) {\n    console.log(name + \"checking product name: \" + product['name']);\n\n    if (name == product['name']) {\n      console.log('true' + _JSON$stringify(product));\n      foundProduct = product;\n    }\n  });\n  return foundProduct;\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/pages/index.js"],"names":["IMALayout","IMARecentSalesChart","fetch","moment","require","format","recent","recentF","example","Dashboard","props","console","log","getMostRecentSalesNIVO","recentSalesByDateMap","height","getInitialProps","ctx","res","json","mostRecentSales","getMostRecentSalesDict","sales","recentSales","forEach","sale","index","date","quantities","product","sameProduct","findProductInQuantities","recentSalesDict","salesOnDate","push","i","length","name","foundProduct"],"mappings":"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","sourcesContent":["import IMALayout from '../components/IMALayout'\r\nimport IMARecentSalesChart from '../components/IMARecentSalesChart'\r\nimport fetch from 'isomorphic-unfetch'\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\nconst recent = {\r\n    \"02/10/2020\":\r\n        [{ \"name\": \"Iron Sheet\", \"qty\": 7, \"price\": 10 },\r\n        { \"name\": \"Copper Sheet\", \"qty\": 2, \"price\": 9.1 }],\r\n    \"02/09/2020\":\r\n        [{ \"name\": \"Iron Sheet\", \"qty\": 1, \"price\": 10 },\r\n        { \"name\": \"Copper Sheet\", \"qty\": 1, \"price\": 9.1 }]\r\n}\r\n\r\nconst recentF = [\r\n    {\r\n        \"date\": \"02/10/2020\",\r\n        \"Iron Sheet\": 7,\r\n        \"Iron SheetColor\": \"hsl(129, 70%, 50%)\",\r\n        \"Copper Sheet\": 2,\r\n        \"Copper SheetColor\": \"hsl(77, 70%, 50%)\"\r\n    },\r\n    {\r\n        \"date\": \"02/09/2020\",\r\n        \"Iron Sheet\": 1,\r\n        \"Iron SheetColor\": \"hsl(129, 70%, 50%)\",\r\n        \"Copper Sheet\": 1,\r\n        \"Copper SheetColor\": \"hsl(77, 70%, 50%)\"\r\n    }\r\n]\r\n\r\nconst example = [\r\n    {\r\n        \"country\": \"AD\",\r\n        \"hot dog\": 118,\r\n        \"hot dogColor\": \"hsl(77, 70%, 50%)\",\r\n        \"burger\": 138,\r\n        \"burgerColor\": \"hsl(339, 70%, 50%)\",\r\n        \"sandwich\": 151,\r\n        \"sandwichColor\": \"hsl(74, 70%, 50%)\",\r\n        \"kebab\": 143,\r\n        \"kebabColor\": \"hsl(228, 70%, 50%)\",\r\n        \"fries\": 197,\r\n        \"friesColor\": \"hsl(271, 70%, 50%)\",\r\n        \"donut\": 150,\r\n        \"donutColor\": \"hsl(129, 70%, 50%)\"\r\n    },\r\n    {\r\n        \"country\": \"AE\",\r\n        \"hot dog\": 61,\r\n        \"hot dogColor\": \"hsl(130, 70%, 50%)\",\r\n        \"burger\": 137,\r\n        \"burgerColor\": \"hsl(145, 70%, 50%)\",\r\n        \"sandwich\": 127,\r\n        \"sandwichColor\": \"hsl(152, 70%, 50%)\",\r\n        \"kebab\": 59,\r\n        \"kebabColor\": \"hsl(9, 70%, 50%)\",\r\n        \"fries\": 28,\r\n        \"friesColor\": \"hsl(52, 70%, 50%)\",\r\n        \"donut\": 169,\r\n        \"donutColor\": \"hsl(300, 70%, 50%)\"\r\n    },\r\n    {\r\n        \"country\": \"AF\",\r\n        \"hot dog\": 181,\r\n        \"hot dogColor\": \"hsl(296, 70%, 50%)\",\r\n        \"burger\": 188,\r\n        \"burgerColor\": \"hsl(219, 70%, 50%)\",\r\n        \"sandwich\": 97,\r\n        \"sandwichColor\": \"hsl(23, 70%, 50%)\",\r\n        \"kebab\": 118,\r\n        \"kebabColor\": \"hsl(277, 70%, 50%)\",\r\n        \"fries\": 127,\r\n        \"friesColor\": \"hsl(18, 70%, 50%)\",\r\n        \"donut\": 72,\r\n        \"donutColor\": \"hsl(92, 70%, 50%)\"\r\n    },\r\n    {\r\n        \"country\": \"AG\",\r\n        \"hot dog\": 16,\r\n        \"hot dogColor\": \"hsl(347, 70%, 50%)\",\r\n        \"burger\": 27,\r\n        \"burgerColor\": \"hsl(97, 70%, 50%)\",\r\n        \"sandwich\": 43,\r\n        \"sandwichColor\": \"hsl(180, 70%, 50%)\",\r\n        \"kebab\": 179,\r\n        \"kebabColor\": \"hsl(285, 70%, 50%)\",\r\n        \"fries\": 134,\r\n        \"friesColor\": \"hsl(325, 70%, 50%)\",\r\n        \"donut\": 187,\r\n        \"donutColor\": \"hsl(145, 70%, 50%)\"\r\n    },\r\n    {\r\n        \"country\": \"AI\",\r\n        \"hot dog\": 39,\r\n        \"hot dogColor\": \"hsl(23, 70%, 50%)\",\r\n        \"burger\": 82,\r\n        \"burgerColor\": \"hsl(77, 70%, 50%)\",\r\n        \"sandwich\": 192,\r\n        \"sandwichColor\": \"hsl(142, 70%, 50%)\",\r\n        \"kebab\": 41,\r\n        \"kebabColor\": \"hsl(360, 70%, 50%)\",\r\n        \"fries\": 99,\r\n        \"friesColor\": \"hsl(291, 70%, 50%)\",\r\n        \"donut\": 12,\r\n        \"donutColor\": \"hsl(359, 70%, 50%)\"\r\n    },\r\n    {\r\n        \"country\": \"AL\",\r\n        \"hot dog\": 65,\r\n        \"hot dogColor\": \"hsl(229, 70%, 50%)\",\r\n        \"burger\": 54,\r\n        \"burgerColor\": \"hsl(132, 70%, 50%)\",\r\n        \"sandwich\": 121,\r\n        \"sandwichColor\": \"hsl(202, 70%, 50%)\",\r\n        \"kebab\": 133,\r\n        \"kebabColor\": \"hsl(58, 70%, 50%)\",\r\n        \"fries\": 144,\r\n        \"friesColor\": \"hsl(89, 70%, 50%)\",\r\n        \"donut\": 26,\r\n        \"donutColor\": \"hsl(120, 70%, 50%)\"\r\n    },\r\n    {\r\n        \"country\": \"AM\",\r\n        \"hot dog\": 166,\r\n        \"hot dogColor\": \"hsl(120, 70%, 50%)\",\r\n        \"burger\": 165,\r\n        \"burgerColor\": \"hsl(194, 70%, 50%)\",\r\n        \"sandwich\": 181,\r\n        \"sandwichColor\": \"hsl(295, 70%, 50%)\",\r\n        \"kebab\": 43,\r\n        \"kebabColor\": \"hsl(128, 70%, 50%)\",\r\n        \"fries\": 69,\r\n        \"friesColor\": \"hsl(158, 70%, 50%)\",\r\n        \"donut\": 133,\r\n        \"donutColor\": \"hsl(292, 70%, 50%)\"\r\n    }\r\n]\r\nconst Dashboard = props => {\r\n    console.log('recentSalesByDateMap' + JSON.stringify(getMostRecentSalesNIVO(props.recentSalesByDateMap)))\r\n    return (\r\n        <IMALayout>\r\n            <div >\r\n                form to add new sale\r\n                form to add new customer\r\n                form to add new inventory item1\r\n            <p>recent sales since 30 days ago: {JSON.stringify(props.recentSalesByDateMap)}</p>\r\n                <div style={{ height: 1000 + \"px\" }}>\r\n                    {/* <IMARecentSalesChart data={getMostRecentSalesNIVO(props.recentSalesByDateMap)} /> */}\r\n                </div>\r\n            </div>\r\n        </IMALayout>\r\n    )\r\n\r\n};\r\n\r\nDashboard.getInitialProps = async ctx => {\r\n    const res = await fetch('http://localhost:3000/api/sales?daysAgo=' + 30)\r\n    const json = await res.json()\r\n    console.log(`Show data fetched. ${JSON.stringify(json)}`);\r\n    var mostRecentSales = getMostRecentSalesDict(json)\r\n    console.log(JSON.stringify(mostRecentSales[0]))\r\n    return { recentSalesByDateMap: mostRecentSales };\r\n}\r\n\r\nfunction getMostRecentSalesDict(sales) {\r\n    var recentSales = {}\r\n    sales.forEach((sale, index) => {\r\n        console.log(index + \":\" + sale[\"date\"])\r\n        var date = moment(sale[\"date\"]).format(\"L\")\r\n        var quantities = sale[\"quantities\"]\r\n        // console.log(JSON.stringify(quantities))\r\n        if (recentSales[date]) {\r\n            console.log('this date exists' + date)\r\n            recentSales[date].forEach((product, index) => {\r\n                // console.log(\"existing product name for this day: \" + product['name'])\r\n                var sameProduct = findProductInQuantities(product[\"name\"], quantities)\r\n                console.log(JSON.stringify(sameProduct))\r\n                if (sameProduct === null) {\r\n\r\n                } else {\r\n                    // console.log(\"found same product: \" + JSON.stringify(product) + product['qty'] +\"+\\n \" + JSON.stringify(sameProduct))\r\n                    product[\"qty\"] += sameProduct[\"qty\"]\r\n                }\r\n            }, recentSales[date])\r\n        } else {\r\n            //this date does not yet exist in recentSales\r\n            recentSales[date] = sale[\"quantities\"]\r\n        }\r\n    })\r\n    console.log(\"map:  \" + JSON.stringify(recentSales) + \"232323\")\r\n    return recentSales;\r\n};\r\n\r\nfunction getMostRecentSalesNIVO(recentSalesDict) {\r\n    var recentSales = []\r\n    Object.keys(recentSalesDict).forEach(function(date, index) {\r\n        var salesOnDate = recentSalesDict[date]\r\n        recentSales.push({})\r\n        recentSales[index]['date']=date\r\n        // console.log(date + \" \" + JSON.stringify(salesOnDate));\r\n        for (var i = 0; i < salesOnDate.length; i++) {\r\n            recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty']\r\n        }\r\n     });\r\n     console.log(\"recentNIVO: \" + JSON.stringify(recentSales))\r\n    return recentSales;\r\n}\r\n\r\nfunction findProductInQuantities(name, quantities) {\r\n    var foundProduct = null;\r\n    quantities.forEach((product, index) => {\r\n        console.log(name + \"checking product name: \" + product['name'])\r\n        if (name == product['name']) {\r\n            console.log('true' + JSON.stringify(product))\r\n            foundProduct = product;\r\n        }\r\n    });\r\n    return foundProduct;\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}