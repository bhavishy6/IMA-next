{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\IMATable.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Table.js\nimport { useTable, useFilters } from \"react-table\";\nimport React, { useState, useEffect } from \"react\";\n\nconst MyTextInput = (_ref) => {\n  let {\n    label\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nexport default function IMATable({\n  columns,\n  data\n}) {\n  // Use the useTable Hook to send the columns and data to build the table\n  // Use the useTable Hook to send the columns and data to build the table\n  const {\n    0: filterInput,\n    1: setFilterInput\n  } = useState(\"\");\n  const {\n    getTableProps,\n    // table props from react-table\n    getTableBodyProps,\n    // table body props from react-table\n    headerGroups,\n    // headerGroups if your table have groupings\n    rows,\n    // rows for the table based on the data passed\n    prepareRow,\n    // Prepare the row (this function need to called for each row before getting the row props)\n    setFilter\n  } = useTable({\n    columns,\n    data\n  }, useFilters);\n\n  const handleFilterChange = e => {\n    const value = e.target.value || undefined;\n    setFilter(\"name\", value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value\n\n    setFilterInput(value);\n  };\n  /* \r\n    Render the UI for your table\r\n    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n  */\n\n\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Filter by Product\"), __jsx(\"input\", {\n    className: \"text-input\",\n    value: filterInput,\n    onChange: handleFilterChange,\n    placeholder: \"Search name\",\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), __jsx(\"table\", _extends({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, headerGroups.map(headerGroup => __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), headerGroup.headers.map(column => __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), column.render(\"Header\")))))), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), row.cells.map(cell => {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), cell.render(\"Cell\"));\n    }));\n  }))));\n}","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/IMATable.js"],"names":["useTable","useFilters","React","useState","useEffect","MyTextInput","label","props","field","meta","useField","id","name","touched","error","IMATable","columns","data","filterInput","setFilterInput","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setFilter","handleFilterChange","e","value","target","undefined","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["// Table.js\r\nimport { useTable, useFilters } from \"react-table\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <>\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n        <input className=\"text-input\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"error\">{meta.error}</div>\r\n        ) : null}\r\n      </>\r\n    );\r\n  };\r\nexport default function IMATable({ columns, data, }) {// Use the useTable Hook to send the columns and data to build the table\r\n    // Use the useTable Hook to send the columns and data to build the table\r\n    const [filterInput, setFilterInput] = useState(\"\");\r\n    const {\r\n        getTableProps, // table props from react-table\r\n        getTableBodyProps, // table body props from react-table\r\n        headerGroups, // headerGroups if your table have groupings\r\n        rows, // rows for the table based on the data passed\r\n        prepareRow, // Prepare the row (this function need to called for each row before getting the row props)\r\n        setFilter\r\n    } = useTable({\r\n        columns,\r\n        data\r\n    },\r\n        useFilters\r\n    );\r\n\r\n    const handleFilterChange = e => {\r\n        const value = e.target.value || undefined;\r\n        setFilter(\"name\", value); // Update the show.name filter. Now our table will filter and show only the rows which have a matching value\r\n        setFilterInput(value);\r\n    };\r\n\r\n    /* \r\n      Render the UI for your table\r\n      - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n    */\r\n    return (\r\n        <> \r\n        <label>\r\n            Filter by Product\r\n        </label>\r\n        <input\r\n            className=\"text-input\"\r\n            value={filterInput}\r\n            onChange={handleFilterChange}\r\n            placeholder={\"Search name\"}\r\n            type=\"text\"\r\n        />\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n        </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}