{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport IMALayout from '../components/IMALayout';\nimport IMARecentSalesChart from '../components/IMARecentSalesChart';\nimport fetch from 'isomorphic-unfetch';\nimport IMANewSaleForm from '../components/forms/IMANewSaleForm';\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nconst Dashboard = props => {\n  return __jsx(IMALayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"form to add new sale form to add new customer form to add new inventory item1\", __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"recent sales since 30 days ago: \", JSON.stringify(props.recentSalesByDateDict)), __jsx(\"div\", {\n    style: {\n      height: 500 + \"px\",\n      width: 500 + 'px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, __jsx(IMARecentSalesChart, {\n    data: getMostRecentSalesNIVO(props.recentSalesByDateDict),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }))), __jsx(IMANewSaleForm, {\n    productList: props.productList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\n\nDashboard.state = {\n  productList: [],\n  recentSalesByDateDict: []\n};\n\nDashboard.ComponentDidMount = () => {\n  var _asyncMostRecentSales = fetchRecentSales(30).then(externalData => {\n    var salesDict = getMostRecentSalesDict(externalData);\n    this.setState(salesDict);\n  });\n};\n\nDashboard.getInitialProps = async ctx => {\n  const inventory = await fetch('http://localhost:3000/api/inventory');\n  const inventoryjson = await inventory.json();\n  var productList = inventoryjson;\n  return {\n    productList: productList\n  };\n};\n\nconst fetchRecentSales = async daysAgo => {\n  const sales = await fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo);\n  const salesjson = await sales.json();\n  return salesjson;\n};\n\nfunction getMostRecentSalesDict(sales) {\n  console.log(\"mrd\" + JSON.stringify(sales));\n  var recentSales = {};\n  sales.forEach((sale, index) => {\n    var date = moment(sale[\"date\"]).format(\"L\");\n    console.log(\"checking dateL : \" + date);\n    var quantities = sale[\"quantities\"];\n\n    if (recentSales[date]) {\n      console.log('this date exists' + date);\n      recentSales[date].forEach((product, index) => {\n        var sameProduct = findProductInQuantities(product[\"name\"], quantities);\n\n        if (sameProduct === null) {} else {\n          product[\"qty\"] += sameProduct[\"qty\"];\n        }\n      }, recentSales[date]);\n    } else {\n      //this date does not yet exist in recentSales\n      recentSales[date] = sale[\"quantities\"];\n    }\n  });\n  console.log(JSON.stringify(recentSales));\n  return recentSales;\n}\n\n;\n\nfunction getMostRecentSalesNIVO(recentSalesDict) {\n  var recentSales = [];\n  Object.keys(recentSalesDict).forEach(function (date, index) {\n    var salesOnDate = recentSalesDict[date];\n    recentSales.push({});\n    recentSales[index]['date'] = date;\n\n    for (var i = 0; i < salesOnDate.length; i++) {\n      recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty'];\n\n      switch (salesOnDate[i]['name']) {\n        case 'Iron Sheet':\n          recentSales[index]['Iron SheetColor'] = \"hsl(129, 70%, 50%)\";\n          break;\n\n        case 'Copper Sheet':\n          recentSales[index]['Copper SheetColor'] = \"hsl(77, 70%, 50%)\";\n          break;\n\n        case 'Free Product':\n          recentSales[index]['Free ProductColor'] = \"hsl(150, 70%, 50%)\";\n          break;\n      }\n    }\n  });\n  return recentSales;\n}\n\nfunction findProductInQuantities(name, quantities) {\n  var foundProduct = null;\n  quantities.forEach((product, index) => {\n    console.log(name + \"checking product name: \" + product['name']);\n\n    if (name == product['name']) {\n      foundProduct = product;\n    }\n  });\n  return foundProduct;\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/pages/index.js"],"names":["IMALayout","IMARecentSalesChart","fetch","IMANewSaleForm","moment","require","format","Dashboard","props","JSON","stringify","recentSalesByDateDict","height","width","getMostRecentSalesNIVO","productList","state","ComponentDidMount","_asyncMostRecentSales","fetchRecentSales","then","externalData","salesDict","getMostRecentSalesDict","setState","getInitialProps","ctx","inventory","inventoryjson","json","daysAgo","sales","salesjson","console","log","recentSales","forEach","sale","index","date","quantities","product","sameProduct","findProductInQuantities","recentSalesDict","Object","keys","salesOnDate","push","i","length","name","foundProduct"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,mBAAP,MAAgC,mCAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACAD,MAAM,GAAGE,MAAT,CAAgB,GAAhB;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACvB,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAoCC,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACG,qBAArB,CAApC,CAJA,EAKI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAM,IAAhB;AAAsBC,MAAAA,KAAK,EAAE,MAAM;AAAnC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,mBAAD;AAAqB,IAAA,IAAI,EAAEC,sBAAsB,CAACN,KAAK,CAACG,qBAAP,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALJ,CADJ,EAWI,MAAC,cAAD;AAAgB,IAAA,WAAW,EAAEH,KAAK,CAACO,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADJ;AAgBH,CAjBD;;AAmBAR,SAAS,CAACS,KAAV,GAAkB;AACdD,EAAAA,WAAW,EAAE,EADC;AAEdJ,EAAAA,qBAAqB,EAAE;AAFT,CAAlB;;AAMAJ,SAAS,CAACU,iBAAV,GAA8B,MAAM;AAChC,MAAIC,qBAAqB,GAAIC,gBAAgB,CAAC,EAAD,CAAhB,CAAqBC,IAArB,CAA0BC,YAAY,IAAI;AACnE,QAAIC,SAAS,GAAGC,sBAAsB,CAACF,YAAD,CAAtC;AACA,SAAKG,QAAL,CAAcF,SAAd;AACH,GAH4B,CAA7B;AAKH,CAND;;AASAf,SAAS,CAACkB,eAAV,GAA4B,MAAMC,GAAN,IAAa;AAErC,QAAMC,SAAS,GAAG,MAAMzB,KAAK,CAAC,qCAAD,CAA7B;AACA,QAAM0B,aAAa,GAAG,MAAMD,SAAS,CAACE,IAAV,EAA5B;AACA,MAAId,WAAW,GAAGa,aAAlB;AACA,SAAO;AACHb,IAAAA,WAAW,EAAEA;AADV,GAAP;AAGH,CARD;;AASA,MAAMI,gBAAgB,GAAG,MAAOW,OAAP,IAAmB;AACxC,QAAMC,KAAK,GAAG,MAAM7B,KAAK,CAAC,6CAA6C4B,OAA9C,CAAzB;AACA,QAAME,SAAS,GAAG,MAAMD,KAAK,CAACF,IAAN,EAAxB;AACA,SAAOG,SAAP;AACH,CAJD;;AAMA,SAAST,sBAAT,CAAgCQ,KAAhC,EAAuC;AACnCE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQzB,IAAI,CAACC,SAAL,CAAeqB,KAAf,CAApB;AACA,MAAII,WAAW,GAAG,EAAlB;AACAJ,EAAAA,KAAK,CAACK,OAAN,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3B,QAAIC,IAAI,GAAGnC,MAAM,CAACiC,IAAI,CAAC,MAAD,CAAL,CAAN,CAAqB/B,MAArB,CAA4B,GAA5B,CAAX;AACA2B,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBK,IAAlC;AACA,QAAIC,UAAU,GAAGH,IAAI,CAAC,YAAD,CAArB;;AACA,QAAIF,WAAW,CAACI,IAAD,CAAf,EAAuB;AACnBN,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBK,IAAjC;AACAJ,MAAAA,WAAW,CAACI,IAAD,CAAX,CAAkBH,OAAlB,CAA0B,CAACK,OAAD,EAAUH,KAAV,KAAoB;AAC1C,YAAII,WAAW,GAAGC,uBAAuB,CAACF,OAAO,CAAC,MAAD,CAAR,EAAkBD,UAAlB,CAAzC;;AACA,YAAIE,WAAW,KAAK,IAApB,EAA0B,CAEzB,CAFD,MAEO;AACHD,UAAAA,OAAO,CAAC,KAAD,CAAP,IAAkBC,WAAW,CAAC,KAAD,CAA7B;AACH;AACJ,OAPD,EAOGP,WAAW,CAACI,IAAD,CAPd;AAQH,KAVD,MAUO;AACH;AACAJ,MAAAA,WAAW,CAACI,IAAD,CAAX,GAAoBF,IAAI,CAAC,YAAD,CAAxB;AACH;AACJ,GAlBD;AAmBAJ,EAAAA,OAAO,CAACC,GAAR,CAAYzB,IAAI,CAACC,SAAL,CAAeyB,WAAf,CAAZ;AACA,SAAOA,WAAP;AACH;;AAAA;;AAED,SAASrB,sBAAT,CAAgC8B,eAAhC,EAAiD;AAC7C,MAAIT,WAAW,GAAG,EAAlB;AACAU,EAAAA,MAAM,CAACC,IAAP,CAAYF,eAAZ,EAA6BR,OAA7B,CAAqC,UAAUG,IAAV,EAAgBD,KAAhB,EAAuB;AACxD,QAAIS,WAAW,GAAGH,eAAe,CAACL,IAAD,CAAjC;AACAJ,IAAAA,WAAW,CAACa,IAAZ,CAAiB,EAAjB;AACAb,IAAAA,WAAW,CAACG,KAAD,CAAX,CAAmB,MAAnB,IAA6BC,IAA7B;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,WAAW,CAACG,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzCd,MAAAA,WAAW,CAACG,KAAD,CAAX,CAAmBS,WAAW,CAACE,CAAD,CAAX,CAAe,MAAf,CAAnB,IAA6CF,WAAW,CAACE,CAAD,CAAX,CAAe,KAAf,CAA7C;;AACA,cAAQF,WAAW,CAACE,CAAD,CAAX,CAAe,MAAf,CAAR;AACI,aAAK,YAAL;AACId,UAAAA,WAAW,CAACG,KAAD,CAAX,CAAmB,iBAAnB,IAAwC,oBAAxC;AACA;;AACJ,aAAK,cAAL;AACIH,UAAAA,WAAW,CAACG,KAAD,CAAX,CAAmB,mBAAnB,IAA0C,mBAA1C;AACA;;AACJ,aAAK,cAAL;AACIH,UAAAA,WAAW,CAACG,KAAD,CAAX,CAAmB,mBAAnB,IAA0C,oBAA1C;AACA;AATR;AAWH;AACJ,GAlBD;AAmBA,SAAOH,WAAP;AACH;;AAED,SAASQ,uBAAT,CAAiCQ,IAAjC,EAAuCX,UAAvC,EAAmD;AAC/C,MAAIY,YAAY,GAAG,IAAnB;AACAZ,EAAAA,UAAU,CAACJ,OAAX,CAAmB,CAACK,OAAD,EAAUH,KAAV,KAAoB;AACnCL,IAAAA,OAAO,CAACC,GAAR,CAAYiB,IAAI,GAAG,yBAAP,GAAmCV,OAAO,CAAC,MAAD,CAAtD;;AACA,QAAIU,IAAI,IAAIV,OAAO,CAAC,MAAD,CAAnB,EAA6B;AACzBW,MAAAA,YAAY,GAAGX,OAAf;AACH;AACJ,GALD;AAMA,SAAOW,YAAP;AACH;;AAED,eAAe7C,SAAf","sourcesContent":["import IMALayout from '../components/IMALayout'\r\nimport IMARecentSalesChart from '../components/IMARecentSalesChart'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport IMANewSaleForm from '../components/forms/IMANewSaleForm';\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\nconst Dashboard = props => {\r\n    return (\r\n        <IMALayout>\r\n            <div >\r\n                form to add new sale\r\n                form to add new customer\r\n                form to add new inventory item1\r\n            <p>recent sales since 30 days ago: {JSON.stringify(props.recentSalesByDateDict)}</p>\r\n                <div style={{ height: 500 + \"px\", width: 500 + 'px' }}>\r\n                    <IMARecentSalesChart data={getMostRecentSalesNIVO(props.recentSalesByDateDict)} />\r\n                </div>\r\n            </div>\r\n\r\n            <IMANewSaleForm productList={props.productList} />\r\n        </IMALayout>\r\n    )\r\n\r\n};\r\n\r\nDashboard.state = {\r\n    productList: [],\r\n    recentSalesByDateDict: []\r\n\r\n}\r\n\r\nDashboard.ComponentDidMount = () => {\r\n    var _asyncMostRecentSales =  fetchRecentSales(30).then(externalData => {\r\n        var salesDict = getMostRecentSalesDict(externalData);\r\n        this.setState(salesDict);\r\n    })\r\n\r\n}\r\n\r\n\r\nDashboard.getInitialProps = async ctx => {\r\n\r\n    const inventory = await fetch('http://localhost:3000/api/inventory')\r\n    const inventoryjson = await inventory.json()\r\n    var productList = inventoryjson\r\n    return {\r\n        productList: productList,\r\n    };\r\n}\r\nconst fetchRecentSales = async (daysAgo) => {\r\n    const sales = await fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo)\r\n    const salesjson = await sales.json()\r\n    return salesjson;\r\n}\r\n\r\nfunction getMostRecentSalesDict(sales) {\r\n    console.log(\"mrd\" + JSON.stringify(sales))\r\n    var recentSales = {}\r\n    sales.forEach((sale, index) => {\r\n        var date = moment(sale[\"date\"]).format(\"L\")\r\n        console.log(\"checking dateL : \" + date)\r\n        var quantities = sale[\"quantities\"]\r\n        if (recentSales[date]) {\r\n            console.log('this date exists' + date)\r\n            recentSales[date].forEach((product, index) => {\r\n                var sameProduct = findProductInQuantities(product[\"name\"], quantities)\r\n                if (sameProduct === null) {\r\n\r\n                } else {\r\n                    product[\"qty\"] += sameProduct[\"qty\"]\r\n                }\r\n            }, recentSales[date])\r\n        } else {\r\n            //this date does not yet exist in recentSales\r\n            recentSales[date] = sale[\"quantities\"]\r\n        }\r\n    })\r\n    console.log(JSON.stringify(recentSales))\r\n    return recentSales;\r\n};\r\n\r\nfunction getMostRecentSalesNIVO(recentSalesDict) {\r\n    var recentSales = []\r\n    Object.keys(recentSalesDict).forEach(function (date, index) {\r\n        var salesOnDate = recentSalesDict[date]\r\n        recentSales.push({})\r\n        recentSales[index]['date'] = date\r\n        for (var i = 0; i < salesOnDate.length; i++) {\r\n            recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty']\r\n            switch (salesOnDate[i]['name']) {\r\n                case 'Iron Sheet':\r\n                    recentSales[index]['Iron SheetColor'] = \"hsl(129, 70%, 50%)\";\r\n                    break;\r\n                case 'Copper Sheet':\r\n                    recentSales[index]['Copper SheetColor'] = \"hsl(77, 70%, 50%)\";\r\n                    break;\r\n                case 'Free Product':\r\n                    recentSales[index]['Free ProductColor'] = \"hsl(150, 70%, 50%)\";\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n    return recentSales;\r\n}\r\n\r\nfunction findProductInQuantities(name, quantities) {\r\n    var foundProduct = null;\r\n    quantities.forEach((product, index) => {\r\n        console.log(name + \"checking product name: \" + product['name'])\r\n        if (name == product['name']) {\r\n            foundProduct = product;\r\n        }\r\n    });\r\n    return foundProduct;\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}