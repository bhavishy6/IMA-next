{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\forms\\\\IMANewProductForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"@emotion/styled\";\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nconst MyTextInput = (_ref) => {\n  let {\n    label\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nfunction submitNewProduct(values) {\n  insetProductIntoInventory(values); //check if customer already exists by Name. if not add new with email if exists.\n\n  if (productExistsInProductList(values['name'])) {\n    updateProductInInventory(values['name'], values['qty']);\n  }\n\n  values['quantities'].forEach((product, index) => {});\n}\n\nfunction productExistsInProductList(productList, productName) {\n  var ret = null;\n  productList.forEach((product, index) => {\n    if (product.name === productName) {\n      ret = true;\n    }\n  });\n  return ret;\n}\n\nconst updateProductInInventory = async (name, incrementAmt) => {\n  const res = await fetch('http://localhost:3000/api/inventoryUpdate', {\n    method: 'post',\n    body: JSON.stringify({\n      name: name,\n      incrementAmt: incrementAmt\n    })\n  });\n};\n\nconst insetProductIntoInventory = async product => {\n  const rest = await fetch('http://localhost:3000/api/inventory', {\n    method: 'post',\n    body: JSON.stringify(product)\n  });\n}; // Styled components ....\n\n\nconst StyledSelect = styled.select`\n    color: var(--blue);\n  `;\nconst StyledErrorMessage = styled.div`\n    font-size: 12px;\n    color: var(--red-600);\n    width: 400px;\n    margin-top: 0.25rem;\n    &:before {\n      content: \"❌ \";\n      font-size: 10px;\n    }\n    @media (prefers-color-scheme: dark) {\n      color: var(--red-300);\n    }\n  `;\nconst StyledLabel = styled.label`\n    margin-top: 1rem;\n  `;\n\nconst IMANewProductForm = props => {\n  console.log(JSON.stringify(props.inventory.map(function (val, index) {\n    return {\n      name: val.name\n    };\n  })));\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Add New Product\"), __jsx(Formik, {\n    initialValues: {\n      name: \"\",\n      price: \"\",\n      qty: \"\"\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n      price: Yup.number().required(\"Required\"),\n      qty: Yup.number().required(\"Required\")\n    }),\n    onSubmit: (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      console.log(\"new product submitted\" + JSON.stringify(values));\n      resetForm({});\n      setTimeout(() => {\n        submitNewProduct(props.productList, values);\n        alert(JSON.stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, ({\n    values,\n    errors,\n    touched,\n    handleReset,\n    setFieldValue\n  }) => {\n    return __jsx(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, __jsx(MyTextInput, {\n      label: \"Product Name\",\n      name: \"name\",\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), __jsx(MyTextInput, {\n      label: \"Product Price\",\n      name: \"price\",\n      type: \"number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), __jsx(MyTextInput, {\n      label: \"Quantity in Stock\",\n      name: \"number\",\n      type: \"number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Submit\"));\n  }));\n};\n\nexport default IMANewProductForm;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/forms/IMANewProductForm.js"],"names":["Formik","Form","useField","FieldArray","Yup","styled","moment","require","format","MyTextInput","label","props","field","meta","id","name","touched","error","submitNewProduct","values","insetProductIntoInventory","productExistsInProductList","updateProductInInventory","forEach","product","index","productList","productName","ret","incrementAmt","res","fetch","method","body","JSON","stringify","rest","StyledSelect","select","StyledErrorMessage","div","StyledLabel","IMANewProductForm","console","log","inventory","map","val","price","qty","object","string","max","required","number","setSubmitting","resetForm","setTimeout","alert","errors","handleReset","setFieldValue"],"mappings":"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","sourcesContent":["import { Formik, Form, useField, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nfunction submitNewProduct(values) {\r\n  insetProductIntoInventory(values); \r\n  //check if customer already exists by Name. if not add new with email if exists.\r\n  if(productExistsInProductList(values['name'])) {\r\n    updateProductInInventory(values['name'], values['qty'])\r\n  }\r\n  values['quantities'].forEach((product, index) => {\r\n  })\r\n}\r\n\r\nfunction productExistsInProductList(productList, productName) {\r\n  var ret = null\r\n  productList.forEach((product, index) => {\r\n    if(product.name === productName) {\r\n      ret = true;\r\n    }\r\n  })\r\n  return ret;\r\n}\r\n\r\nconst updateProductInInventory = async (name, incrementAmt) => {\r\n  const res = await fetch('http://localhost:3000/api/inventoryUpdate', {\r\n    method: 'post',\r\n    body: JSON.stringify({ name: name, incrementAmt: incrementAmt })\r\n  })\r\n}\r\n\r\nconst insetProductIntoInventory = async (product) => {\r\n  const rest = await fetch('http://localhost:3000/api/inventory', {\r\n    method:'post',\r\n    body: JSON.stringify(product)\r\n  })\r\n}\r\n\r\n// Styled components ....\r\nconst StyledSelect = styled.select`\r\n    color: var(--blue);\r\n  `;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n    font-size: 12px;\r\n    color: var(--red-600);\r\n    width: 400px;\r\n    margin-top: 0.25rem;\r\n    &:before {\r\n      content: \"❌ \";\r\n      font-size: 10px;\r\n    }\r\n    @media (prefers-color-scheme: dark) {\r\n      color: var(--red-300);\r\n    }\r\n  `;\r\n\r\nconst StyledLabel = styled.label`\r\n    margin-top: 1rem;\r\n  `;\r\n\r\n\r\nconst IMANewProductForm = props => {\r\n  console.log(JSON.stringify(props.inventory.map(\r\n    function (val, index) {\r\n      return { name: val.name }\r\n    })));\r\n  return (\r\n    <>\r\n      <h1>Add New Product</h1>\r\n      <Formik\r\n        initialValues={{\r\n          name: \"\",\r\n          price: \"\",\r\n          qty: \"\",\r\n          }}\r\n        validationSchema={Yup.object({\r\n          name: Yup.string()\r\n            .max(15, \"Must be 15 characters or less\")\r\n            .required(\"Required\"),\r\n          price: Yup.number()\r\n            .required(\"Required\"),\r\n          qty: Yup.number()\r\n            .required(\"Required\"),\r\n        })}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          console.log(\"new product submitted\" + JSON.stringify(values));\r\n          resetForm({});\r\n          setTimeout(() => {\r\n            submitNewProduct(props.productList, values);\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n          }, 400);\r\n        }}\r\n      >\r\n        {({ values, errors, touched, handleReset, setFieldValue }) => {\r\n          return (\r\n            <Form>\r\n              <MyTextInput\r\n                label=\"Product Name\"\r\n                name=\"name\"\r\n                type=\"text\"\r\n              />\r\n              <MyTextInput\r\n                label=\"Product Price\"\r\n                name=\"price\"\r\n                type=\"number\"\r\n              />\r\n              <MyTextInput\r\n                label=\"Quantity in Stock\"\r\n                name=\"number\"\r\n                type=\"number\"\r\n              />\r\n              <button type=\"submit\">Submit</button>\r\n            </Form>\r\n          )\r\n        }}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IMANewProductForm;"]},"metadata":{},"sourceType":"module"}