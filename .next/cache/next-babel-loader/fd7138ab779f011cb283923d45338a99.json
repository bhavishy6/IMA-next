{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport IMALayout from '../components/IMALayout';\nimport IMARecentSalesChart from '../components/IMARecentSalesChart';\nimport fetch from 'isomorphic-unfetch';\nimport IMANewSaleForm from '../components/forms/IMANewSaleForm';\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nvar Dashboard = function Dashboard(props) {\n  return __jsx(IMALayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"form to add new sale form to add new customer form to add new inventory item1\", __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"recent sales since 30 days ago: \", _JSON$stringify(props.recentSalesByDateDict)), __jsx(\"div\", {\n    style: {\n      height: 500 + \"px\",\n      width: 500 + 'px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, __jsx(IMARecentSalesChart, {\n    data: getMostRecentSalesNIVO(props.recentSalesByDateDict),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }))), __jsx(IMANewSaleForm, {\n    productList: props.productList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }));\n};\n\nDashboard.getInitialProps = function _callee(ctx) {\n  var mostRecentSales, inventory, inventoryjson, productList;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          mostRecentSales = [];\n          fetchRecentSales(30, function (response) {\n            mostRecentSales = getMostRecentSalesDict(response);\n          });\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/inventory'));\n\n        case 4:\n          inventory = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(inventory.json());\n\n        case 7:\n          inventoryjson = _context.sent;\n          productList = inventoryjson;\n          return _context.abrupt(\"return\", {\n            productList: productList,\n            recentSalesByDateDict: mostRecentSales\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar fetchRecentSales = function fetchRecentSales(daysAgo, callback) {\n  var sales, salesjson;\n  return _regeneratorRuntime.async(function fetchRecentSales$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo));\n\n        case 2:\n          sales = _context2.sent;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(sales.json().then(function (response) {\n            callback(response);\n          }));\n\n        case 5:\n          salesjson = _context2.sent;\n          return _context2.abrupt(\"return\", salesjson);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\n\nfunction getMostRecentSalesDict(sales) {\n  var recentSales = {};\n  sales.forEach(function (sale, index) {\n    var date = moment(sale[\"date\"]).format(\"L\");\n    console.log(\"checking dateL : \" + date);\n    var quantities = sale[\"quantities\"];\n\n    if (recentSales[date]) {\n      console.log('this date exists' + date);\n      recentSales[date].forEach(function (product, index) {\n        var sameProduct = findProductInQuantities(product[\"name\"], quantities);\n\n        if (sameProduct === null) {} else {\n          product[\"qty\"] += sameProduct[\"qty\"];\n        }\n      }, recentSales[date]);\n    } else {\n      //this date does not yet exist in recentSales\n      recentSales[date] = sale[\"quantities\"];\n    }\n  });\n  console.log(_JSON$stringify(recentSales));\n  return recentSales;\n}\n\n;\n\nfunction getMostRecentSalesNIVO(recentSalesDict) {\n  var recentSales = [];\n\n  _Object$keys(recentSalesDict).forEach(function (date, index) {\n    var salesOnDate = recentSalesDict[date];\n    recentSales.push({});\n    recentSales[index]['date'] = date;\n\n    for (var i = 0; i < salesOnDate.length; i++) {\n      recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty'];\n\n      switch (salesOnDate[i]['name']) {\n        case 'Iron Sheet':\n          recentSales[index]['Iron SheetColor'] = \"hsl(129, 70%, 50%)\";\n          break;\n\n        case 'Copper Sheet':\n          recentSales[index]['Copper SheetColor'] = \"hsl(77, 70%, 50%)\";\n          break;\n      }\n    }\n  });\n\n  return recentSales;\n}\n\nfunction findProductInQuantities(name, quantities) {\n  var foundProduct = null;\n  quantities.forEach(function (product, index) {\n    console.log(name + \"checking product name: \" + product['name']);\n\n    if (name == product['name']) {\n      foundProduct = product;\n    }\n  });\n  return foundProduct;\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/pages/index.js"],"names":["IMALayout","IMARecentSalesChart","fetch","IMANewSaleForm","moment","require","format","Dashboard","props","recentSalesByDateDict","height","width","getMostRecentSalesNIVO","productList","getInitialProps","ctx","mostRecentSales","fetchRecentSales","response","getMostRecentSalesDict","inventory","json","inventoryjson","daysAgo","callback","sales","then","salesjson","recentSales","forEach","sale","index","date","console","log","quantities","product","sameProduct","findProductInQuantities","recentSalesDict","salesOnDate","push","i","length","name","foundProduct"],"mappings":"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","sourcesContent":["import IMALayout from '../components/IMALayout'\r\nimport IMARecentSalesChart from '../components/IMARecentSalesChart'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport IMANewSaleForm from '../components/forms/IMANewSaleForm';\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\nconst Dashboard = props => {\r\n    return (\r\n        <IMALayout>\r\n            <div >\r\n                form to add new sale\r\n                form to add new customer\r\n                form to add new inventory item1\r\n            <p>recent sales since 30 days ago: {JSON.stringify(props.recentSalesByDateDict)}</p>\r\n                <div style={{ height: 500 + \"px\", width: 500 + 'px' }}>\r\n                    <IMARecentSalesChart data={getMostRecentSalesNIVO(props.recentSalesByDateDict)} />\r\n                </div>\r\n            </div>\r\n\r\n            <IMANewSaleForm productList={props.productList} />\r\n        </IMALayout>\r\n    )\r\n\r\n};\r\n\r\nDashboard.getInitialProps = async ctx => {\r\n    var mostRecentSales = []\r\n    fetchRecentSales(30, (response) => {\r\n        mostRecentSales = getMostRecentSalesDict(response)\r\n    })\r\n\r\n    const inventory = await fetch('http://localhost:3000/api/inventory')\r\n    const inventoryjson = await inventory.json()\r\n    var productList = inventoryjson\r\n    return {\r\n        productList: productList,\r\n        recentSalesByDateDict: mostRecentSales\r\n    };\r\n}\r\nconst fetchRecentSales = async (daysAgo, callback) => {\r\n    const sales = await fetch('http://localhost:3000/api/sales?daysAgo=' + daysAgo)\r\n    const salesjson = await sales.json().then(response => {\r\n        callback(response)\r\n    })\r\n    return salesjson;\r\n}\r\n\r\nfunction getMostRecentSalesDict(sales) {\r\n    var recentSales = {}\r\n    sales.forEach((sale, index) => {\r\n        var date = moment(sale[\"date\"]).format(\"L\")\r\n        console.log(\"checking dateL : \" + date)\r\n        var quantities = sale[\"quantities\"]\r\n        if (recentSales[date]) {\r\n            console.log('this date exists' + date)\r\n            recentSales[date].forEach((product, index) => {\r\n                var sameProduct = findProductInQuantities(product[\"name\"], quantities)\r\n                if (sameProduct === null) {\r\n\r\n                } else {\r\n                    product[\"qty\"] += sameProduct[\"qty\"]\r\n                }\r\n            }, recentSales[date])\r\n        } else {\r\n            //this date does not yet exist in recentSales\r\n            recentSales[date] = sale[\"quantities\"]\r\n        }\r\n    })\r\n    console.log(JSON.stringify(recentSales))\r\n    return recentSales;\r\n};\r\n\r\nfunction getMostRecentSalesNIVO(recentSalesDict) {\r\n    var recentSales = []\r\n    Object.keys(recentSalesDict).forEach(function (date, index) {\r\n        var salesOnDate = recentSalesDict[date]\r\n        recentSales.push({})\r\n        recentSales[index]['date'] = date\r\n        for (var i = 0; i < salesOnDate.length; i++) {\r\n            recentSales[index][salesOnDate[i]['name']] = salesOnDate[i]['qty']\r\n            switch (salesOnDate[i]['name']) {\r\n                case 'Iron Sheet':\r\n                    recentSales[index]['Iron SheetColor'] = \"hsl(129, 70%, 50%)\";\r\n                    break;\r\n                case 'Copper Sheet':\r\n                    recentSales[index]['Copper SheetColor'] = \"hsl(77, 70%, 50%)\";\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n    return recentSales;\r\n}\r\n\r\nfunction findProductInQuantities(name, quantities) {\r\n    var foundProduct = null;\r\n    quantities.forEach((product, index) => {\r\n        console.log(name + \"checking product name: \" + product['name'])\r\n        if (name == product['name']) {\r\n            foundProduct = product;\r\n        }\r\n    });\r\n    return foundProduct;\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}