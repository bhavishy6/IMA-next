{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\pages\\\\inventory.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport fetch from 'isomorphic-unfetch';\nimport IMALayout from '../components/IMALayout';\nimport styled from \"@emotion/styled\";\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n  }\n`; // Create an editable cell renderer\n\nconst EditableCell = ({\n  cell: {\n    value: initialValue\n  },\n  row: {\n    index\n  },\n  column: {\n    id\n  },\n  updateMyData // This is a custom function that we supplied to our table instance\n\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  const onBlur = () => {\n    updateMyData(index, id, value);\n  }; // If the initialValue is changed externall, sync it up with our state\n\n\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return __jsx(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  });\n}; // Set our editable cell renderer as the default Cell renderer\n\n\nconst defaultColumn = {\n  Cell: EditableCell\n}; // Be sure to pass our updateMyData and the skipPageReset option\n\nfunction Table({\n  columns,\n  data,\n  updateMyData,\n  skipPageReset\n}) {\n  // For this example, we're using pagination to illustrate how to stop\n  // the current page from resetting when our data changes\n  // Otherwise, nothing is different here.\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // use the skipPageReset option to disable page resetting temporarily\n    autoResetPage: !skipPageReset,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData\n  }, usePagination); // Render the UI for your table\n\n  return __jsx(React.Fragment, null, __jsx(\"table\", _extends({}, getTableProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), __jsx(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, headerGroups.map(headerGroup => __jsx(\"tr\", _extends({}, headerGroup.getHeaderGroupProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), headerGroup.headers.map(column => __jsx(\"th\", _extends({}, column.getHeaderProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), column.render('Header')))))), __jsx(\"tbody\", _extends({}, getTableBodyProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), page.map((row, i) => {\n    prepareRow(row);\n    return __jsx(\"tr\", _extends({}, row.getRowProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), row.cells.map(cell => {\n      return __jsx(\"td\", _extends({}, cell.getCellProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), cell.render('Cell'));\n    }));\n  }))), __jsx(\"div\", {\n    className: \"pagination\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    onClick: () => gotoPage(0),\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, '<<'), ' ', __jsx(\"button\", {\n    onClick: () => previousPage(),\n    disabled: !canPreviousPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, '<'), ' ', __jsx(\"button\", {\n    onClick: () => nextPage(),\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, '>'), ' ', __jsx(\"button\", {\n    onClick: () => gotoPage(pageCount - 1),\n    disabled: !canNextPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, '>>'), ' ', __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Page\", ' ', __jsx(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, pageIndex + 1, \" of \", pageOptions.length), ' '), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"| Go to page:\", ' ', __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: pageIndex + 1,\n    onChange: e => {\n      const page = e.target.value ? Number(e.target.value) - 1 : 0;\n      gotoPage(page);\n    },\n    style: {\n      width: '100px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  })), ' ', __jsx(\"select\", {\n    value: pageSize,\n    onChange: e => {\n      setPageSize(Number(e.target.value));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, [10, 20, 30, 40, 50].map(pageSize => __jsx(\"option\", {\n    key: pageSize,\n    value: pageSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Show \", pageSize)))));\n}\n\nconst InventoryPage = props => {\n  const columns = React.useMemo(() => [{\n    Header: 'Product Name',\n    accessor: 'name'\n  }, {\n    Header: 'Price',\n    accessor: 'price'\n  }, {\n    Header: 'Stock',\n    accessor: 'qty'\n  }]);\n  return __jsx(IMALayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"container\",\n    style: inventoryStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, \"Inventory management table.\", __jsx(Table, {\n    columns: columns,\n    data: data,\n    updateMyData: updateMyData,\n    skipPageReset: skipPageReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  })));\n};\n\nInventoryPage.getInitialProps = async () => {\n  const res = await fetch('http://localhost:3000/api/inventory');\n  const json = await res.json();\n  console.log(`Inventory fetched.${JSON.stringify(json)}`);\n  return {\n    inventory: json,\n    columns: [{\n      title: \"Product Name\",\n      field: \"name\",\n      sorter: \"string\",\n      width: 150\n    }, {\n      title: \"Stock\",\n      field: \"qty\",\n      sorter: \"number\"\n    }, {\n      title: \"Price\",\n      field: \"price\",\n      align: \"right\"\n    }]\n  };\n};\n\nexport default InventoryPage;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/pages/inventory.js"],"names":["fetch","IMALayout","styled","Styles","div","EditableCell","cell","value","initialValue","row","index","column","id","updateMyData","setValue","React","useState","onChange","e","target","onBlur","useEffect","defaultColumn","Cell","Table","columns","data","skipPageReset","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","useTable","autoResetPage","usePagination","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","getCellProps","length","Number","width","InventoryPage","props","useMemo","Header","accessor","inventoryStyles","getInitialProps","res","json","console","log","JSON","stringify","inventory","title","field","sorter","align"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch'\r\nimport IMALayout from '../components/IMALayout';\r\nimport styled from \"@emotion/styled\";\r\n\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n\r\n      input {\r\n        font-size: 1rem;\r\n        padding: 0;\r\n        margin: 0;\r\n        border: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination {\r\n    padding: 0.5rem;\r\n  }\r\n`\r\n\r\n// Create an editable cell renderer\r\nconst EditableCell = ({\r\n    cell: { value: initialValue },\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData, // This is a custom function that we supplied to our table instance\r\n}) => {\r\n    // We need to keep and update the state of the cell normally\r\n    const [value, setValue] = React.useState(initialValue)\r\n\r\n    const onChange = e => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    // We'll only update the external data when the input is blurred\r\n    const onBlur = () => {\r\n        updateMyData(index, id, value)\r\n    }\r\n\r\n    // If the initialValue is changed externall, sync it up with our state\r\n    React.useEffect(() => {\r\n        setValue(initialValue)\r\n    }, [initialValue])\r\n\r\n    return <input value={value} onChange={onChange} onBlur={onBlur} />\r\n}\r\n\r\n// Set our editable cell renderer as the default Cell renderer\r\nconst defaultColumn = {\r\n    Cell: EditableCell,\r\n}\r\n\r\n// Be sure to pass our updateMyData and the skipPageReset option\r\nfunction Table({ columns, data, updateMyData, skipPageReset }) {\r\n    // For this example, we're using pagination to illustrate how to stop\r\n    // the current page from resetting when our data changes\r\n    // Otherwise, nothing is different here.\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page,\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        state: { pageIndex, pageSize },\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            // use the skipPageReset option to disable page resetting temporarily\r\n            autoResetPage: !skipPageReset,\r\n            // updateMyData isn't part of the API, but\r\n            // anything we put into these options will\r\n            // automatically be available on the instance.\r\n            // That way we can call this function from our\r\n            // cell renderer!\r\n            updateMyData,\r\n        },\r\n        usePagination\r\n    )\r\n\r\n    // Render the UI for your table\r\n    return (\r\n        <>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {page.map((row, i) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"pagination\">\r\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n                    {'<<'}\r\n                </button>{' '}\r\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n                    {'<'}\r\n                </button>{' '}\r\n                <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n                    {'>'}\r\n                </button>{' '}\r\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n                    {'>>'}\r\n                </button>{' '}\r\n                <span>\r\n                    Page{' '}\r\n                    <strong>\r\n                        {pageIndex + 1} of {pageOptions.length}\r\n                    </strong>{' '}\r\n                </span>\r\n                <span>\r\n                    | Go to page:{' '}\r\n                    <input\r\n                        type=\"number\"\r\n                        defaultValue={pageIndex + 1}\r\n                        onChange={e => {\r\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n                            gotoPage(page)\r\n                        }}\r\n                        style={{ width: '100px' }}\r\n                    />\r\n                </span>{' '}\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={e => {\r\n                        setPageSize(Number(e.target.value))\r\n                    }}\r\n                >\r\n                    {[10, 20, 30, 40, 50].map(pageSize => (\r\n                        <option key={pageSize} value={pageSize}>\r\n                            Show {pageSize}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst InventoryPage = props => {\r\n    const columns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Product Name',\r\n                accessor: 'name',\r\n            },\r\n            {\r\n                Header: 'Price',\r\n                accessor: 'price',\r\n            },\r\n            {\r\n                Header: 'Stock',\r\n                accessor: 'qty',\r\n            }\r\n        ],\r\n    )\r\n\r\n    return (\r\n        <IMALayout>\r\n            <div className=\"container\" style={inventoryStyles}>\r\n                Inventory management table.\r\n                <Table\r\n                    columns={columns}\r\n                    data={data}\r\n                    updateMyData={updateMyData}\r\n                    skipPageReset={skipPageReset}\r\n                />\r\n            </div>\r\n        </IMALayout>\r\n    );\r\n}\r\n\r\nInventoryPage.getInitialProps = async () => {\r\n    const res = await fetch('http://localhost:3000/api/inventory')\r\n    const json = await res.json()\r\n    console.log(`Inventory fetched.${JSON.stringify(json)}`);\r\n    return {\r\n        inventory: json,\r\n        columns: [\r\n            { title: \"Product Name\", field: \"name\", sorter: \"string\", width: 150 },\r\n            { title: \"Stock\", field: \"qty\", sorter: \"number\" },\r\n            { title: \"Price\", field: \"price\", align: \"right\" },\r\n        ]\r\n    }\r\n}\r\n\r\nexport default InventoryPage;"]},"metadata":{},"sourceType":"module"}