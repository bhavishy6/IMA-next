{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\forms\\\\IMANewSaleForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    margin-top: 1rem;\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    font-size: 12px;\\n    color: var(--red-600);\\n    width: 400px;\\n    margin-top: 0.25rem;\\n    &:before {\\n      content: \\\"\\u274C \\\";\\n      font-size: 10px;\\n    }\\n    @media (prefers-color-scheme: dark) {\\n      color: var(--red-300);\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    color: var(--blue);\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nimport Autocomplete from \"react-autocomplete\";\nimport * as Yup from \"yup\";\nimport styled from \"@emotion/styled\";\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nvar MyTextInput = function MyTextInput(_ref) {\n  var label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nvar MySelect = function MySelect(_ref2) {\n  var label = _ref2.label,\n      props = _objectWithoutProperties(_ref2, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField3 = useField(props),\n      _useField4 = _slicedToArray(_useField3, 2),\n      field = _useField4[0],\n      meta = _useField4[1];\n\n  return __jsx(React.Fragment, null, __jsx(StyledLabel, {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, label), __jsx(StyledSelect, _extends({}, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(StyledErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nvar MyDateInput = function MyDateInput(_ref3) {\n  var label = _ref3.label,\n      props = _objectWithoutProperties(_ref3, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField5 = useField(props),\n      _useField6 = _slicedToArray(_useField5, 2),\n      field = _useField6[0],\n      meta = _useField6[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nfunction submitNewSale(values) {\n  //calculate totalPrice of sale\n  //add entry to Sales collection in Mongo.\n  //check if customer already exists by Name. if not add new with email if exists.\n  //find products in Products and decrease qty by amount\n  //go through the products. if any products do not exist, create new product with qty 0.\n  values['quantities'].forEach(function (product, index) {\n    // if (productListContainsProduct(product['name'])) {\n    updateProductInInventory(product['name'], product['qty']); // }\n    //insert thisProductInDB into db \n  });\n}\n\nvar updateProductInInventory = function updateProductInInventory(name, incrementAmt) {\n  var res;\n  return _regeneratorRuntime.async(function updateProductInInventory$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/inventoryUpdate', {\n            method: 'post',\n            body: _JSON$stringify({\n              name: name,\n              incrementAmt: incrementAmt\n            })\n          }));\n\n        case 2:\n          res = _context.sent;\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}; // Styled components ....\n\n\nvar StyledSelect = styled.select(_templateObject());\nvar StyledErrorMessage = styled.div(_templateObject2());\nvar StyledLabel = styled.label(_templateObject3());\n\nvar IMANewSaleForm = function IMANewSaleForm(props) {\n  console.log(_JSON$stringify(props.productList.map(function (val, index) {\n    return {\n      name: val.name\n    };\n  })));\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Add New Sale\"), __jsx(Formik, {\n    initialValues: {\n      customerName: \"\",\n      date: \"\",\n      customerEmail: \"\",\n      quantities: [{}] // added for our select\n\n    },\n    validationSchema: Yup.object({\n      customerName: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n      date: Yup.date().required(\"Required\"),\n      customerEmail: Yup.string().email(\"Invalid email address\"),\n      quantities: Yup.array().of(Yup.object().shape({\n        name: Yup.string().required('Required'),\n        qty: Yup.number().min(0, 'Must be atleast 1').required('Required')\n      })).required('Must have products sold').min(1, 'Minimum of 1 product')\n    }),\n    onSubmit: function onSubmit(values, _ref4) {\n      var setSubmitting = _ref4.setSubmitting;\n      console.log(\"submitted\" + _JSON$stringify(values));\n      setTimeout(function () {\n        // submitNewSale(values);\n        alert(_JSON$stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, function (_ref5) {\n    var values = _ref5.values,\n        errors = _ref5.errors,\n        touched = _ref5.touched,\n        handleReset = _ref5.handleReset,\n        setFieldValue = _ref5.setFieldValue;\n    return __jsx(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, __jsx(MyTextInput, {\n      label: \"Customer Name\",\n      name: \"customerName\",\n      type: \"text\",\n      placeholder: \"John Doe\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), __jsx(MyDateInput, {\n      label: \"Date of Sale\",\n      name: \"date\",\n      type: \"date\",\n      placeholder: moment(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), __jsx(MyTextInput, {\n      label: \"Customer Email Address\",\n      name: \"customerEmail\",\n      type: \"email\",\n      placeholder: \"jane@doe.com\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Add Products Bought\"), __jsx(FieldArray, {\n      name: \"quantities\",\n      render: function render(arrayHelpers) {\n        return __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, values.quantities.length > 0 && values.quantities.map(function (product, index) {\n          return __jsx(\"div\", {\n            className: \"row\",\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172\n            },\n            __self: this\n          }, __jsx(\"div\", {\n            className: \"col\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173\n            },\n            __self: this\n          }, __jsx(\"label\", {\n            htmlFor: \"quantities.\".concat(index, \".name\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }, \"Name\"), __jsx(Autocomplete, {\n            getItemValue: function getItemValue(item) {\n              return item.name;\n            },\n            items: props.productList.map(function (val, index) {\n              return {\n                name: val.name\n              };\n            }),\n            renderItem: function renderItem(item, isHighlighted) {\n              return __jsx(\"div\", {\n                key: item.name,\n                style: {\n                  background: isHighlighted ? \"lightgray\" : \"white\"\n                },\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 182\n                },\n                __self: this\n              }, item.name);\n            },\n            value: values.value,\n            name: \"quantities.\".concat(index, \".name\"),\n            placeholder: \"Iron Sheet\",\n            type: \"text\",\n            onChange: function onChange(e) {\n              return setFieldValue(\"value\", e.target.value);\n            },\n            onSelect: function onSelect(val) {\n              return setFieldValue(\"value\", val);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175\n            },\n            __self: this\n          })), __jsx(\"div\", {\n            className: \"col\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196\n            },\n            __self: this\n          }, __jsx(\"label\", {\n            htmlFor: \"quantities.\".concat(index, \".qty\"),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 197\n            },\n            __self: this\n          }, \" Quantity\"), __jsx(MyTextInput, {\n            name: \"quantities.\".concat(index, \".qty\"),\n            placeholder: \"99999\",\n            type: \"number\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198\n            },\n            __self: this\n          })), __jsx(\"div\", {\n            className: \"col\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          }, __jsx(\"button\", {\n            className: \"secondary\",\n            type: \"remove\",\n            onClick: function onClick() {\n              return arrayHelpers.remove(index);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          }, \"X\")));\n        }), __jsx(\"button\", {\n          type: \"add\",\n          className: \"secondary\",\n          onClick: function onClick() {\n            return arrayHelpers.push({\n              name: \"\",\n              qty: \"\"\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }, \"Add Product\"));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Submit\"));\n  }));\n};\n\nexport default IMANewSaleForm;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/forms/IMANewSaleForm.js"],"names":["Formik","Form","useField","FieldArray","Autocomplete","Yup","styled","moment","require","format","MyTextInput","label","props","field","meta","id","name","touched","error","MySelect","MyDateInput","submitNewSale","values","forEach","product","index","updateProductInInventory","incrementAmt","fetch","method","body","res","StyledSelect","select","StyledErrorMessage","div","StyledLabel","IMANewSaleForm","console","log","productList","map","val","customerName","date","customerEmail","quantities","object","string","max","required","email","array","of","shape","qty","number","min","setSubmitting","setTimeout","alert","errors","handleReset","setFieldValue","arrayHelpers","length","item","isHighlighted","background","value","e","target","remove","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,UAAjC,QAAmD,QAAnD;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACAD,MAAM,GAAGE,MAAT,CAAgB,GAAhB;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAyB;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAZC,KAAY;;AAC3C;AACA;AAF2C,kBAGrBV,QAAQ,CAACU,KAAD,CAHa;AAAA;AAAA,MAGpCC,KAHoC;AAAA,MAG7BC,IAH6B;;AAI3C,SACE,4BACE;AAAO,IAAA,OAAO,EAAEF,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCL,KAAzC,CADF,EAEE;AAAO,IAAA,SAAS,EAAC;AAAjB,KAAkCE,KAAlC,EAA6CD,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGGE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,GACC;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBJ,IAAI,CAACI,KAA7B,CADD,GAEG,IALN,CADF;AASD,CAbD;;AAeA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,QAAyB;AAAA,MAAtBR,KAAsB,SAAtBA,KAAsB;AAAA,MAAZC,KAAY;;AACxC;AACA;AAFwC,mBAGlBV,QAAQ,CAACU,KAAD,CAHU;AAAA;AAAA,MAGjCC,KAHiC;AAAA,MAG1BC,IAH0B;;AAIxC,SACE,4BACE,MAAC,WAAD;AAAa,IAAA,OAAO,EAAEF,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+CL,KAA/C,CADF,EAEE,MAAC,YAAD,eAAkBE,KAAlB,EAA6BD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGGE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,GACC,MAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBJ,IAAI,CAACI,KAA1B,CADD,GAEG,IALN,CADF;AASD,CAbD;;AAeA,IAAME,WAAW,GAAG,SAAdA,WAAc,QAAyB;AAAA,MAAtBT,KAAsB,SAAtBA,KAAsB;AAAA,MAAZC,KAAY;;AAC3C;AACA;AAF2C,mBAGrBV,QAAQ,CAACU,KAAD,CAHa;AAAA;AAAA,MAGpCC,KAHoC;AAAA,MAG7BC,IAH6B;;AAI3C,SACE,4BACE;AAAO,IAAA,OAAO,EAAEF,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCL,KAAzC,CADF,EAEE;AAAO,IAAA,SAAS,EAAC;AAAjB,KAAkCE,KAAlC,EAA6CD,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGGE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,GACC;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBJ,IAAI,CAACI,KAA7B,CADD,GAEG,IALN,CADF;AASD,CAbD;;AAeA,SAASG,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B;AACA;AACA;AACA;AACA;AACAA,EAAAA,MAAM,CAAC,YAAD,CAAN,CAAqBC,OAArB,CAA6B,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAC/C;AACAC,IAAAA,wBAAwB,CAACF,OAAO,CAAC,MAAD,CAAR,EAAkBA,OAAO,CAAC,KAAD,CAAzB,CAAxB,CAF+C,CAG/C;AACA;AACD,GALD;AAMD;;AAED,IAAME,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAOV,IAAP,EAAaW,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACbC,KAAK,CAAC,2CAAD,EAA8C;AACnEC,YAAAA,MAAM,EAAE,MAD2D;AAEnEC,YAAAA,IAAI,EAAE,gBAAe;AAAEd,cAAAA,IAAI,EAAEA,IAAR;AAAcW,cAAAA,YAAY,EAAEA;AAA5B,aAAf;AAF6D,WAA9C,CADQ;;AAAA;AACzBI,UAAAA,GADyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC,C,CAOA;;;AACA,IAAMC,YAAY,GAAG1B,MAAM,CAAC2B,MAAV,mBAAlB;AAIA,IAAMC,kBAAkB,GAAG5B,MAAM,CAAC6B,GAAV,oBAAxB;AAcA,IAAMC,WAAW,GAAG9B,MAAM,CAACK,KAAV,oBAAjB;;AAKA,IAAM0B,cAAc,GAAG,SAAjBA,cAAiB,CAAAzB,KAAK,EAAI;AAC9B0B,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAe3B,KAAK,CAAC4B,WAAN,CAAkBC,GAAlB,CACzB,UAAUC,GAAV,EAAejB,KAAf,EAAsB;AACpB,WAAO;AAAET,MAAAA,IAAI,EAAE0B,GAAG,CAAC1B;AAAZ,KAAP;AACD,GAHwB,CAAf,CAAZ;AAIA,SACE,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACb2B,MAAAA,YAAY,EAAE,EADD;AAEbC,MAAAA,IAAI,EAAE,EAFO;AAGbC,MAAAA,aAAa,EAAE,EAHF;AAIbC,MAAAA,UAAU,EAAE,CAAC,EAAD,CAJC,CAII;;AAJJ,KADjB;AAOE,IAAA,gBAAgB,EAAEzC,GAAG,CAAC0C,MAAJ,CAAW;AAC3BJ,MAAAA,YAAY,EAAEtC,GAAG,CAAC2C,MAAJ,GACXC,GADW,CACP,EADO,EACH,+BADG,EAEXC,QAFW,CAEF,UAFE,CADa;AAI3BN,MAAAA,IAAI,EAAEvC,GAAG,CAACuC,IAAJ,GACHM,QADG,CACM,UADN,CAJqB;AAM3BL,MAAAA,aAAa,EAAExC,GAAG,CAAC2C,MAAJ,GACZG,KADY,CACN,uBADM,CANY;AAQ3BL,MAAAA,UAAU,EAAEzC,GAAG,CAAC+C,KAAJ,GACTC,EADS,CAERhD,GAAG,CAAC0C,MAAJ,GAAaO,KAAb,CAAmB;AACjBtC,QAAAA,IAAI,EAAEX,GAAG,CAAC2C,MAAJ,GACHE,QADG,CACM,UADN,CADW;AAGjBK,QAAAA,GAAG,EAAElD,GAAG,CAACmD,MAAJ,GACFC,GADE,CACE,CADF,EACK,mBADL,EAEFP,QAFE,CAEO,UAFP;AAHY,OAAnB,CAFQ,EASRA,QATQ,CASC,yBATD,EAUTO,GAVS,CAUL,CAVK,EAUF,sBAVE;AARe,KAAX,CAPpB;AA2BE,IAAA,QAAQ,EAAE,kBAACnC,MAAD,SAA+B;AAAA,UAApBoC,aAAoB,SAApBA,aAAoB;AACvCpB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAc,gBAAejB,MAAf,CAA1B;AACAqC,MAAAA,UAAU,CAAC,YAAM;AACf;AACAC,QAAAA,KAAK,CAAC,gBAAetC,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAoC,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD,OAJS,EAIP,GAJO,CAAV;AAKD,KAlCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAoCG,iBAA6D;AAAA,QAA1DpC,MAA0D,SAA1DA,MAA0D;AAAA,QAAlDuC,MAAkD,SAAlDA,MAAkD;AAAA,QAA1C5C,OAA0C,SAA1CA,OAA0C;AAAA,QAAjC6C,WAAiC,SAAjCA,WAAiC;AAAA,QAApBC,aAAoB,SAApBA,aAAoB;AAC5D,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD;AACE,MAAA,KAAK,EAAC,eADR;AAEE,MAAA,IAAI,EAAC,cAFP;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,WAAW,EAAC,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,MAAC,WAAD;AACE,MAAA,KAAK,EAAC,cADR;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,WAAW,EAAExD,MAAM,EAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAaE,MAAC,WAAD;AACE,MAAA,KAAK,EAAC,wBADR;AAEE,MAAA,IAAI,EAAC,eAFP;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,WAAW,EAAC,cAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,EAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAnBF,EAoBE,MAAC,UAAD;AACE,MAAA,IAAI,EAAC,YADP;AAEE,MAAA,MAAM,EAAE,gBAAAyD,YAAY;AAAA,eAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG1C,MAAM,CAACwB,UAAP,CAAkBmB,MAAlB,GAA2B,CAA3B,IACC3C,MAAM,CAACwB,UAAP,CAAkBL,GAAlB,CAAsB,UAACjB,OAAD,EAAUC,KAAV;AAAA,iBACpB;AAAK,YAAA,SAAS,EAAC,KAAf;AAAqB,YAAA,GAAG,EAAEA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAO,YAAA,OAAO,uBAAgBA,KAAhB,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE,MAAC,YAAD;AACE,YAAA,YAAY,EAAE,sBAAAyC,IAAI;AAAA,qBAAIA,IAAI,CAAClD,IAAT;AAAA,aADpB;AAEE,YAAA,KAAK,EAAEJ,KAAK,CAAC4B,WAAN,CAAkBC,GAAlB,CACL,UAAUC,GAAV,EAAejB,KAAf,EAAsB;AACpB,qBAAO;AAAET,gBAAAA,IAAI,EAAE0B,GAAG,CAAC1B;AAAZ,eAAP;AACD,aAHI,CAFT;AAME,YAAA,UAAU,EAAE,oBAACkD,IAAD,EAAOC,aAAP;AAAA,qBACV;AAAK,gBAAA,GAAG,EAAED,IAAI,CAAClD,IAAf;AACE,gBAAA,KAAK,EAAE;AAAEoD,kBAAAA,UAAU,EAAED,aAAa,GAAG,WAAH,GAAiB;AAA5C,iBADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAGGD,IAAI,CAAClD,IAHR,CADU;AAAA,aANd;AAaE,YAAA,KAAK,EAAEM,MAAM,CAAC+C,KAbhB;AAcE,YAAA,IAAI,uBAAgB5C,KAAhB,UAdN;AAeE,YAAA,WAAW,EAAC,YAfd;AAgBE,YAAA,IAAI,EAAC,MAhBP;AAiBE,YAAA,QAAQ,EAAE,kBAAA6C,CAAC;AAAA,qBAAIP,aAAa,CAAC,OAAD,EAAUO,CAAC,CAACC,MAAF,CAASF,KAAnB,CAAjB;AAAA,aAjBb;AAkBE,YAAA,QAAQ,EAAE,kBAAA3B,GAAG;AAAA,qBAAIqB,aAAa,CAAC,OAAD,EAAUrB,GAAV,CAAjB;AAAA,aAlBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CADF,EAwBE;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAO,YAAA,OAAO,uBAAgBjB,KAAhB,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,MAAC,WAAD;AACE,YAAA,IAAI,uBAAgBA,KAAhB,SADN;AAEE,YAAA,WAAW,EAAC,OAFd;AAGE,YAAA,IAAI,EAAC,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CAxBF,EAgCE;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AACE,YAAA,SAAS,EAAC,WADZ;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,OAAO,EAAE;AAAA,qBAAMuC,YAAY,CAACQ,MAAb,CAAoB/C,KAApB,CAAN;AAAA,aAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CAhCF,CADoB;AAAA,SAAtB,CAFJ,EA8CE;AACE,UAAA,IAAI,EAAC,KADP;AAEE,UAAA,SAAS,EAAC,WAFZ;AAGE,UAAA,OAAO,EAAE;AAAA,mBAAMuC,YAAY,CAACS,IAAb,CAAkB;AAAEzD,cAAAA,IAAI,EAAE,EAAR;AAAYuC,cAAAA,GAAG,EAAE;AAAjB,aAAlB,CAAN;AAAA,WAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA9CF,CADkB;AAAA,OAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,EAgFE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhFF,CADF;AAoFD,GAzHH,CAFF,CADF;AAgID,CArID;;AAuIA,eAAelB,cAAf","sourcesContent":["import { Formik, Form, useField, FieldArray } from \"formik\";\r\nimport Autocomplete from \"react-autocomplete\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MySelect = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n      <StyledSelect {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MyDateInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nfunction submitNewSale(values) {\r\n  //calculate totalPrice of sale\r\n  //add entry to Sales collection in Mongo.\r\n  //check if customer already exists by Name. if not add new with email if exists.\r\n  //find products in Products and decrease qty by amount\r\n  //go through the products. if any products do not exist, create new product with qty 0.\r\n  values['quantities'].forEach((product, index) => {\r\n    // if (productListContainsProduct(product['name'])) {\r\n    updateProductInInventory(product['name'], product['qty'])\r\n    // }\r\n    //insert thisProductInDB into db \r\n  })\r\n}\r\n\r\nconst updateProductInInventory = async (name, incrementAmt) => {\r\n  const res = await fetch('http://localhost:3000/api/inventoryUpdate', {\r\n    method: 'post',\r\n    body: JSON.stringify({ name: name, incrementAmt: incrementAmt })\r\n  })\r\n}\r\n\r\n// Styled components ....\r\nconst StyledSelect = styled.select`\r\n    color: var(--blue);\r\n  `;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n    font-size: 12px;\r\n    color: var(--red-600);\r\n    width: 400px;\r\n    margin-top: 0.25rem;\r\n    &:before {\r\n      content: \"❌ \";\r\n      font-size: 10px;\r\n    }\r\n    @media (prefers-color-scheme: dark) {\r\n      color: var(--red-300);\r\n    }\r\n  `;\r\n\r\nconst StyledLabel = styled.label`\r\n    margin-top: 1rem;\r\n  `;\r\n\r\n\r\nconst IMANewSaleForm = props => {\r\n  console.log(JSON.stringify(props.productList.map(\r\n    function (val, index) {\r\n      return { name: val.name }\r\n    })));\r\n  return (\r\n    <>\r\n      <h1>Add New Sale</h1>\r\n      <Formik\r\n        initialValues={{\r\n          customerName: \"\",\r\n          date: \"\",\r\n          customerEmail: \"\",\r\n          quantities: [{}] // added for our select\r\n        }}\r\n        validationSchema={Yup.object({\r\n          customerName: Yup.string()\r\n            .max(15, \"Must be 15 characters or less\")\r\n            .required(\"Required\"),\r\n          date: Yup.date()\r\n            .required(\"Required\"),\r\n          customerEmail: Yup.string()\r\n            .email(\"Invalid email address\"),\r\n          quantities: Yup.array()\r\n            .of(\r\n              Yup.object().shape({\r\n                name: Yup.string()\r\n                  .required('Required'),\r\n                qty: Yup.number()\r\n                  .min(0, 'Must be atleast 1')\r\n                  .required('Required'),\r\n              })\r\n            ).required('Must have products sold')\r\n            .min(1, 'Minimum of 1 product'),\r\n        })}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          console.log(\"submitted\" + JSON.stringify(values));\r\n          setTimeout(() => {\r\n            // submitNewSale(values);\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n          }, 400);\r\n        }}\r\n      >\r\n        {({ values, errors, touched, handleReset, setFieldValue }) => {\r\n          return (\r\n            <Form>\r\n              <MyTextInput\r\n                label=\"Customer Name\"\r\n                name=\"customerName\"\r\n                type=\"text\"\r\n                placeholder=\"John Doe\"\r\n              />\r\n              <MyDateInput\r\n                label=\"Date of Sale\"\r\n                name=\"date\"\r\n                type=\"date\"\r\n                placeholder={moment()}\r\n              />\r\n              <MyTextInput\r\n                label=\"Customer Email Address\"\r\n                name=\"customerEmail\"\r\n                type=\"email\"\r\n                placeholder=\"jane@doe.com\"\r\n              />\r\n              <h3>Add Products Bought</h3>\r\n              <FieldArray\r\n                name=\"quantities\"\r\n                render={arrayHelpers => (\r\n                  <div>\r\n                    {values.quantities.length > 0 &&\r\n                      values.quantities.map((product, index) => (\r\n                        <div className=\"row\" key={index}>\r\n                          <div className=\"col\">\r\n                            <label htmlFor={`quantities.${index}.name`}>Name</label>\r\n                            <Autocomplete\r\n                              getItemValue={item => item.name}\r\n                              items={props.productList.map(\r\n                                function (val, index) {\r\n                                  return { name: val.name }\r\n                                })}\r\n                              renderItem={(item, isHighlighted) => (\r\n                                <div key={item.name}\r\n                                  style={{ background: isHighlighted ? \"lightgray\" : \"white\" }}\r\n                                >\r\n                                  {item.name}\r\n                                </div>\r\n                              )}\r\n                              value={values.value}\r\n                              name={`quantities.${index}.name`}\r\n                              placeholder=\"Iron Sheet\"\r\n                              type=\"text\"\r\n                              onChange={e => setFieldValue(\"value\", e.target.value)}\r\n                              onSelect={val => setFieldValue(\"value\", val)}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col\">\r\n                            <label htmlFor={`quantities.${index}.qty`}> Quantity</label>\r\n                            <MyTextInput\r\n                              name={`quantities.${index}.qty`}\r\n                              placeholder=\"99999\"\r\n                              type=\"number\"\r\n                            />\r\n                          </div>\r\n                          <div className=\"col\">\r\n                            <button\r\n                              className=\"secondary\"\r\n                              type=\"remove\"\r\n                              onClick={() => arrayHelpers.remove(index)}\r\n                            >\r\n                              X\r\n                      </button>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    <button\r\n                      type=\"add\"\r\n                      className=\"secondary\"\r\n                      onClick={() => arrayHelpers.push({ name: \"\", qty: \"\" })}\r\n                    >\r\n                      Add Product\r\n              </button>\r\n                  </div>\r\n                )}\r\n              />\r\n\r\n              <button type=\"submit\">Submit</button>\r\n            </Form>\r\n          )\r\n        }}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IMANewSaleForm;"]},"metadata":{},"sourceType":"module"}