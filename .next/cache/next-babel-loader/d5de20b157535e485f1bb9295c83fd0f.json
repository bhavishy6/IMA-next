{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\forms\\\\IMAInputs.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    margin-top: 1rem;\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    font-size: 12px;\\n    color: var(--red-600);\\n    width: 400px;\\n    margin-top: 0.25rem;\\n    &:before {\\n      content: \\\"\\u274C \\\";\\n      font-size: 10px;\\n    }\\n    @media (prefers-color-scheme: dark) {\\n      color: var(--red-300);\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    color: var(--blue);\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nimport styled from \"@emotion/styled\"; // Styled components ....\n\nexport var StyledSelect = styled.select(_templateObject());\nexport var StyledErrorMessage = styled.div(_templateObject2());\nexport var StyledLabel = styled.label(_templateObject3());\nexport var MyTextInput = function MyTextInput(_ref) {\n  var label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, meta.error) : null);\n};\nexport var MySelect = function MySelect(_ref2) {\n  var label = _ref2.label,\n      props = _objectWithoutProperties(_ref2, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField3 = useField(props),\n      _useField4 = _slicedToArray(_useField3, 2),\n      field = _useField4[0],\n      meta = _useField4[1];\n\n  return __jsx(React.Fragment, null, __jsx(StyledLabel, {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, label), __jsx(StyledSelect, _extends({}, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(StyledErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, meta.error) : null);\n};\nexport var MyDateInput = function MyDateInput(_ref3) {\n  var label = _ref3.label,\n      props = _objectWithoutProperties(_ref3, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField5 = useField(props),\n      _useField6 = _slicedToArray(_useField5, 2),\n      field = _useField6[0],\n      meta = _useField6[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, meta.error) : null);\n};","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/forms/IMAInputs.js"],"names":["Formik","Form","useField","FieldArray","styled","StyledSelect","select","StyledErrorMessage","div","StyledLabel","label","MyTextInput","props","field","meta","id","name","touched","error","MySelect","MyDateInput"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,UAAjC,QAAmD,QAAnD;AAEA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAGD,MAAM,CAACE,MAAV,mBAAlB;AAIP,OAAO,IAAMC,kBAAkB,GAAGH,MAAM,CAACI,GAAV,oBAAxB;AAcP,OAAO,IAAMC,WAAW,GAAGL,MAAM,CAACM,KAAV,oBAAjB;AAKP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAyB;AAAA,MAAtBD,KAAsB,QAAtBA,KAAsB;AAAA,MAAZE,KAAY;;AAChD;AACA;AAFgD,kBAG1BV,QAAQ,CAACU,KAAD,CAHkB;AAAA;AAAA,MAGzCC,KAHyC;AAAA,MAGlCC,IAHkC;;AAIhD,SACI,4BACI;AAAO,IAAA,OAAO,EAAEF,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCN,KAAzC,CADJ,EAEI;AAAO,IAAA,SAAS,EAAC;AAAjB,KAAkCG,KAAlC,EAA6CD,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAGKE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,GACG;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBJ,IAAI,CAACI,KAA7B,CADH,GAEG,IALR,CADJ;AASH,CAbM;AAeP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,QAAyB;AAAA,MAAtBT,KAAsB,SAAtBA,KAAsB;AAAA,MAAZE,KAAY;;AAC7C;AACA;AAF6C,mBAGvBV,QAAQ,CAACU,KAAD,CAHe;AAAA;AAAA,MAGtCC,KAHsC;AAAA,MAG/BC,IAH+B;;AAI7C,SACI,4BACI,MAAC,WAAD;AAAa,IAAA,OAAO,EAAEF,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+CN,KAA/C,CADJ,EAEI,MAAC,YAAD,eAAkBG,KAAlB,EAA6BD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAGKE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,GACG,MAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBJ,IAAI,CAACI,KAA1B,CADH,GAEG,IALR,CADJ;AASH,CAbM;AAeP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,QAAyB;AAAA,MAAtBV,KAAsB,SAAtBA,KAAsB;AAAA,MAAZE,KAAY;;AAChD;AACA;AAFgD,mBAG1BV,QAAQ,CAACU,KAAD,CAHkB;AAAA;AAAA,MAGzCC,KAHyC;AAAA,MAGlCC,IAHkC;;AAIhD,SACI,4BACI;AAAO,IAAA,OAAO,EAAEF,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyCN,KAAzC,CADJ,EAEI;AAAO,IAAA,SAAS,EAAC;AAAjB,KAAkCG,KAAlC,EAA6CD,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAGKE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,GACG;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBJ,IAAI,CAACI,KAA7B,CADH,GAEG,IALR,CADJ;AASH,CAbM","sourcesContent":["import { Formik, Form, useField, FieldArray } from \"formik\";\r\n\r\nimport styled from \"@emotion/styled\";\r\n\r\n// Styled components ....\r\nexport const StyledSelect = styled.select`\r\n    color: var(--blue);\r\n  `;\r\n\r\nexport const StyledErrorMessage = styled.div`\r\n    font-size: 12px;\r\n    color: var(--red-600);\r\n    width: 400px;\r\n    margin-top: 0.25rem;\r\n    &:before {\r\n      content: \"❌ \";\r\n      font-size: 10px;\r\n    }\r\n    @media (prefers-color-scheme: dark) {\r\n      color: var(--red-300);\r\n    }\r\n  `;\r\n\r\nexport const StyledLabel = styled.label`\r\n    margin-top: 1rem;\r\n  `;\r\n\r\n\r\nexport const MyTextInput = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n        <>\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            <input className=\"text-input\" {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"error\">{meta.error}</div>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nexport const MySelect = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n        <>\r\n            <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n            <StyledSelect {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n            ) : null}\r\n        </>\r\n    );\r\n};\r\n\r\nexport const MyDateInput = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n        <>\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            <input className=\"text-input\" {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"error\">{meta.error}</div>\r\n            ) : null}\r\n        </>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}