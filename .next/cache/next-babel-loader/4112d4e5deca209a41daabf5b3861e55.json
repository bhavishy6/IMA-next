{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\forms\\\\IMANewSaleForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    margin-top: 1rem;\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    font-size: 12px;\\n    color: var(--red-600);\\n    width: 400px;\\n    margin-top: 0.25rem;\\n    &:before {\\n      content: \\\"\\u274C \\\";\\n      font-size: 10px;\\n    }\\n    @media (prefers-color-scheme: dark) {\\n      color: var(--red-300);\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    color: var(--blue);\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { Formik, Form, useField, FieldArray } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"@emotion/styled\";\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nvar MyTextInput = function MyTextInput(_ref) {\n  var label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nvar MyProductInput = function MyProductInput(_ref2) {\n  var label = _ref2.label,\n      props = _objectWithoutProperties(_ref2, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField3 = useField(props),\n      _useField4 = _slicedToArray(_useField3, 2),\n      field = _useField4[0],\n      meta = _useField4[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"quantities.\".concat(index, \".name\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Name\"), __jsx(MyTextInput, {\n    label: 'Name',\n    name: \"name\",\n    placeholder: \"Iron Sheet\",\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"quantities.\".concat(index, \".qty\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \" Quantity\"), __jsx(MyTextInput, {\n    label: 'Quantity',\n    name: \"qty\",\n    placeholder: \"99999\",\n    type: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  })));\n};\n\nvar MyDateInput = function MyDateInput(_ref3) {\n  var label = _ref3.label,\n      props = _objectWithoutProperties(_ref3, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField5 = useField(props),\n      _useField6 = _slicedToArray(_useField5, 2),\n      field = _useField6[0],\n      meta = _useField6[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, meta.error) : null);\n}; // Styled components ....\n\n\nvar StyledSelect = styled.select(_templateObject());\nvar StyledErrorMessage = styled.div(_templateObject2());\nvar StyledLabel = styled.label(_templateObject3());\n\nvar MySelect = function MySelect(_ref4) {\n  var label = _ref4.label,\n      props = _objectWithoutProperties(_ref4, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField7 = useField(props),\n      _useField8 = _slicedToArray(_useField7, 2),\n      field = _useField8[0],\n      meta = _useField8[1];\n\n  return __jsx(React.Fragment, null, __jsx(StyledLabel, {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, label), __jsx(StyledSelect, _extends({}, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(StyledErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nvar IMANewSaleForm = function IMANewSaleForm(props) {\n  var quantitiesInSale = [{}, {}];\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Add New Sale\"), __jsx(Formik, {\n    initialValues: {\n      customerName: \"\",\n      date: \"\",\n      email: \"\",\n      quantities: [] // added for our select\n\n    },\n    validationSchema: Yup.object({\n      customerName: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n      date: Yup.date().required(\"Required\"),\n      email: Yup.string().email(\"Invalid email address\"),\n      quantities: Yup.array().of(Yup.object().shape({\n        name: Yup.string().required('Required'),\n        qty: Yup.number().min(0, 'Must be atleast 1').required('Required')\n      })).required('Must have products sold').min(1, 'Minimum of 1 product')\n    }),\n    onSubmit: function onSubmit(values, _ref5) {\n      var setSubmitting = _ref5.setSubmitting;\n      setTimeout(function () {\n        alert(_JSON$stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, __jsx(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, __jsx(MyTextInput, {\n    label: \"Customer Name\",\n    name: \"customerName\",\n    type: \"text\",\n    placeholder: \"John Doe\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }), __jsx(MyDateInput, {\n    label: \"Date of Sale\",\n    name: \"date\",\n    type: \"date\",\n    placeholder: moment(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), __jsx(MyTextInput, {\n    label: \"Customer Address\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"jane@doe.com\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }), __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"Add Products Bought\"), __jsx(FieldArray, {\n    name: \"quantities\",\n    render: function render(arrayHelpers) {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, quantitiesInSale.length > 0 && quantitiesInSale.map(function (product, index) {\n        return __jsx(\"div\", {\n          className: \"row\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, __jsx(MyProductInput, {\n          index: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172\n          },\n          __self: this\n        }), __jsx(\"div\", {\n          className: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        }, __jsx(\"button\", {\n          className: \"secondary\",\n          type: \"remove\",\n          onClick: function onClick() {\n            return arrayHelpers.remove(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }, \"X\")));\n      }), __jsx(\"button\", {\n        type: \"add\",\n        className: \"secondary\",\n        onClick: function onClick() {\n          return arrayHelpers.push({\n            name: \"\",\n            qty: \"\"\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Add Product\"));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"Submit\"))));\n};\n\nexport default IMANewSaleForm;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/forms/IMANewSaleForm.js"],"names":["Formik","Form","useField","FieldArray","Yup","styled","moment","require","format","MyTextInput","label","props","field","meta","id","name","touched","error","MyProductInput","index","MyDateInput","StyledSelect","select","StyledErrorMessage","div","StyledLabel","MySelect","IMANewSaleForm","quantitiesInSale","customerName","date","email","quantities","object","string","max","required","array","of","shape","qty","number","min","values","setSubmitting","setTimeout","alert","arrayHelpers","length","map","product","remove","push"],"mappings":"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","sourcesContent":["import { Formik, Form, useField, FieldArray } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MyProductInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <div className=\"col\">\r\n        <label htmlFor={`quantities.${index}.name`}>Name</label>\r\n        <MyTextInput\r\n          label={'Name'}\r\n          name={`name`}\r\n          placeholder=\"Iron Sheet\"\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n      <div className=\"col\">\r\n        <label htmlFor={`quantities.${index}.qty`}> Quantity</label>\r\n        <MyTextInput\r\n          label={'Quantity'}\r\n          name={`qty`}\r\n          placeholder=\"99999\"\r\n          type=\"number\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst MyDateInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\n// Styled components ....\r\nconst StyledSelect = styled.select`\r\n    color: var(--blue);\r\n  `;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n    font-size: 12px;\r\n    color: var(--red-600);\r\n    width: 400px;\r\n    margin-top: 0.25rem;\r\n    &:before {\r\n      content: \"❌ \";\r\n      font-size: 10px;\r\n    }\r\n    @media (prefers-color-scheme: dark) {\r\n      color: var(--red-300);\r\n    }\r\n  `;\r\n\r\nconst StyledLabel = styled.label`\r\n    margin-top: 1rem;\r\n  `;\r\n\r\nconst MySelect = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n      <StyledSelect {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst IMANewSaleForm = props => {\r\n\r\n  var quantitiesInSale = [{}, {}]\r\n  return (\r\n    <>\r\n      <h1>Add New Sale</h1>\r\n      <Formik\r\n        initialValues={{\r\n          customerName: \"\",\r\n          date: \"\",\r\n          email: \"\",\r\n          quantities: [] // added for our select\r\n        }}\r\n        validationSchema={Yup.object({\r\n          customerName: Yup.string()\r\n            .max(15, \"Must be 15 characters or less\")\r\n            .required(\"Required\"),\r\n          date: Yup.date()\r\n            .required(\"Required\"),\r\n          email: Yup.string()\r\n            .email(\"Invalid email address\"),\r\n          quantities: Yup.array()\r\n            .of(\r\n              Yup.object().shape({\r\n                name: Yup.string()\r\n                  .required('Required'),\r\n                qty: Yup.number()\r\n                  .min(0, 'Must be atleast 1')\r\n                  .required('Required'),\r\n              })\r\n            ).required('Must have products sold')\r\n            .min(1, 'Minimum of 1 product'),\r\n        })}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          setTimeout(() => {\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n          }, 400);\r\n        }}\r\n      >\r\n        <Form>\r\n          <MyTextInput\r\n            label=\"Customer Name\"\r\n            name=\"customerName\"\r\n            type=\"text\"\r\n            placeholder=\"John Doe\"\r\n          />\r\n          <MyDateInput\r\n            label=\"Date of Sale\"\r\n            name=\"date\"\r\n            type=\"date\"\r\n            placeholder={moment()}\r\n          />\r\n          <MyTextInput\r\n            label=\"Customer Address\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"jane@doe.com\"\r\n          />\r\n          <h3>Add Products Bought</h3>\r\n          <FieldArray\r\n            name=\"quantities\"\r\n            render={arrayHelpers => (\r\n              <div>\r\n                {quantitiesInSale.length > 0 &&\r\n                  quantitiesInSale.map((product, index) => (\r\n                    <div className=\"row\" key={index}>\r\n                      <MyProductInput index={index}/>\r\n                      <div className=\"col\">\r\n                        <button\r\n                          className=\"secondary\"\r\n                          type=\"remove\"\r\n                          onClick={() => arrayHelpers.remove(index)}\r\n                        >\r\n                          X\r\n                      </button>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                <button\r\n                  type=\"add\"\r\n                  className=\"secondary\"\r\n                  onClick={() => arrayHelpers.push({ name: \"\", qty: \"\" })}\r\n                >\r\n                  Add Product\r\n              </button>\r\n              </div>\r\n            )}\r\n          />\r\n\r\n          <button type=\"submit\">Submit</button>\r\n        </Form>\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IMANewSaleForm;"]},"metadata":{},"sourceType":"module"}