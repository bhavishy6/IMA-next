{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\components\\\\forms\\\\IMANewSaleForm.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    margin-top: 1rem;\\n  \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    font-size: 12px;\\n    color: var(--red-600);\\n    width: 400px;\\n    margin-top: 0.25rem;\\n    &:before {\\n      content: \\\"\\u274C \\\";\\n      font-size: 10px;\\n    }\\n    @media (prefers-color-scheme: dark) {\\n      color: var(--red-300);\\n    }\\n  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    color: var(--blue);\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport styled from \"@emotion/styled\";\nimport \"styles-forms.css\";\n\nvar MyTextInput = function MyTextInput(_ref) {\n  var label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, label), __jsx(\"input\", _extends({\n    className: \"text-input\"\n  }, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nvar MyCheckbox = function MyCheckbox(_ref2) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, [\"children\"]);\n\n  var _useField3 = useField(_objectSpread({}, props, {\n    type: \"checkbox\"\n  })),\n      _useField4 = _slicedToArray(_useField3, 2),\n      field = _useField4[0],\n      meta = _useField4[1];\n\n  return __jsx(React.Fragment, null, __jsx(\"label\", {\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, __jsx(\"input\", _extends({}, field, props, {\n    type: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })), children), meta.touched && meta.error ? __jsx(\"div\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, meta.error) : null);\n}; // Styled components ....\n\n\nvar StyledSelect = styled.select(_templateObject());\nvar StyledErrorMessage = styled.div(_templateObject2());\nvar StyledLabel = styled.label(_templateObject3());\n\nvar MySelect = function MySelect(_ref3) {\n  var label = _ref3.label,\n      props = _objectWithoutProperties(_ref3, [\"label\"]);\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  var _useField5 = useField(props),\n      _useField6 = _slicedToArray(_useField5, 2),\n      field = _useField6[0],\n      meta = _useField6[1];\n\n  return __jsx(React.Fragment, null, __jsx(StyledLabel, {\n    htmlFor: props.id || props.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, label), __jsx(StyledSelect, _extends({}, field, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), meta.touched && meta.error ? __jsx(StyledErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, meta.error) : null);\n};\n\nvar IMANewSaleForm = function IMANewSaleForm(props) {\n  return __jsx(React.Fragment, null, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Subscribe!\"), __jsx(Formik, {\n    initialValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      acceptedTerms: false,\n      // added for our checkbox\n      jobType: \"\" // added for our select\n\n    },\n    validationSchema: Yup.object({\n      firstName: Yup.string().max(15, \"Must be 15 characters or less\").required(\"Required\"),\n      lastName: Yup.string().max(20, \"Must be 20 characters or less\").required(\"Required\"),\n      email: Yup.string().email(\"Invalid email addresss`\").required(\"Required\"),\n      acceptedTerms: Yup[\"boolean\"]().required(\"Required\").oneOf([true], \"You must accept the terms and conditions.\"),\n      jobType: Yup.string() // specify the set of valid values for job type\n      // @see http://bit.ly/yup-mixed-oneOf\n      .oneOf([\"designer\", \"development\", \"product\", \"other\"], \"Invalid Job Type\").required(\"Required\")\n    }),\n    onSubmit: function onSubmit(values, _ref4) {\n      var setSubmitting = _ref4.setSubmitting;\n      setTimeout(function () {\n        alert(_JSON$stringify(values, null, 2));\n        setSubmitting(false);\n      }, 400);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, __jsx(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, __jsx(MyTextInput, {\n    label: \"First Name\",\n    name: \"firstName\",\n    type: \"text\",\n    placeholder: \"Jane\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), __jsx(MyTextInput, {\n    label: \"Last Name\",\n    name: \"lastName\",\n    type: \"text\",\n    placeholder: \"Doe\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), __jsx(MyTextInput, {\n    label: \"Email Address\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"jane@formik.com\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), __jsx(MySelect, {\n    label: \"Job Type\",\n    name: \"jobType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Select a job type\"), __jsx(\"option\", {\n    value: \"designer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Designer\"), __jsx(\"option\", {\n    value: \"development\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Developer\"), __jsx(\"option\", {\n    value: \"product\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Product Manager\"), __jsx(\"option\", {\n    value: \"other\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Other\")), __jsx(MyCheckbox, {\n    name: \"acceptedTerms\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"I accept the terms and conditions\"), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Submit\"))));\n};\n\nexport default IMANewSaleForm;","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/components/forms/IMANewSaleForm.js"],"names":["Formik","Form","useField","Yup","styled","MyTextInput","label","props","field","meta","id","name","touched","error","MyCheckbox","children","type","StyledSelect","select","StyledErrorMessage","div","StyledLabel","MySelect","IMANewSaleForm","firstName","lastName","email","acceptedTerms","jobType","object","string","max","required","oneOf","values","setSubmitting","setTimeout","alert"],"mappings":"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","sourcesContent":["import { Formik, Form, useField } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport styled from \"@emotion/styled\";\r\nimport \"styles-forms.css\";\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <>\r\n        <label htmlFor={props.id || props.name}>{label}</label>\r\n        <input className=\"text-input\" {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"error\">{meta.error}</div>\r\n        ) : null}\r\n      </>\r\n    );\r\n  };\r\n  \r\n  const MyCheckbox = ({ children, ...props }) => {\r\n    const [field, meta] = useField({ ...props, type: \"checkbox\" });\r\n    return (\r\n      <>\r\n        <label className=\"checkbox\">\r\n          <input {...field} {...props} type=\"checkbox\" />\r\n          {children}\r\n        </label>\r\n        {meta.touched && meta.error ? (\r\n          <div className=\"error\">{meta.error}</div>\r\n        ) : null}\r\n      </>\r\n    );\r\n  };\r\n  \r\n  // Styled components ....\r\n  const StyledSelect = styled.select`\r\n    color: var(--blue);\r\n  `;\r\n  \r\n  const StyledErrorMessage = styled.div`\r\n    font-size: 12px;\r\n    color: var(--red-600);\r\n    width: 400px;\r\n    margin-top: 0.25rem;\r\n    &:before {\r\n      content: \"❌ \";\r\n      font-size: 10px;\r\n    }\r\n    @media (prefers-color-scheme: dark) {\r\n      color: var(--red-300);\r\n    }\r\n  `;\r\n  \r\n  const StyledLabel = styled.label`\r\n    margin-top: 1rem;\r\n  `;\r\n  \r\n  const MySelect = ({ label, ...props }) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <>\r\n        <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n        <StyledSelect {...field} {...props} />\r\n        {meta.touched && meta.error ? (\r\n          <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n        ) : null}\r\n      </>\r\n    );\r\n  };\r\n  \r\n\r\nconst IMANewSaleForm = props => {\r\n\r\n    return (\r\n    <>\r\n      <h1>Subscribe!</h1>\r\n      <Formik\r\n        initialValues={{\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          email: \"\",\r\n          acceptedTerms: false, // added for our checkbox\r\n          jobType: \"\" // added for our select\r\n        }}\r\n        validationSchema={Yup.object({\r\n          firstName: Yup.string()\r\n            .max(15, \"Must be 15 characters or less\")\r\n            .required(\"Required\"),\r\n          lastName: Yup.string()\r\n            .max(20, \"Must be 20 characters or less\")\r\n            .required(\"Required\"),\r\n          email: Yup.string()\r\n            .email(\"Invalid email addresss`\")\r\n            .required(\"Required\"),\r\n          acceptedTerms: Yup.boolean()\r\n            .required(\"Required\")\r\n            .oneOf([true], \"You must accept the terms and conditions.\"),\r\n          jobType: Yup.string()\r\n            // specify the set of valid values for job type\r\n            // @see http://bit.ly/yup-mixed-oneOf\r\n            .oneOf(\r\n              [\"designer\", \"development\", \"product\", \"other\"],\r\n              \"Invalid Job Type\"\r\n            )\r\n            .required(\"Required\")\r\n        })}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          setTimeout(() => {\r\n            alert(JSON.stringify(values, null, 2));\r\n            setSubmitting(false);\r\n          }, 400);\r\n        }}\r\n      >\r\n        <Form>\r\n          <MyTextInput\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            type=\"text\"\r\n            placeholder=\"Jane\"\r\n          />\r\n          <MyTextInput\r\n            label=\"Last Name\"\r\n            name=\"lastName\"\r\n            type=\"text\"\r\n            placeholder=\"Doe\"\r\n          />\r\n          <MyTextInput\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"jane@formik.com\"\r\n          />\r\n          <MySelect label=\"Job Type\" name=\"jobType\">\r\n            <option value=\"\">Select a job type</option>\r\n            <option value=\"designer\">Designer</option>\r\n            <option value=\"development\">Developer</option>\r\n            <option value=\"product\">Product Manager</option>\r\n            <option value=\"other\">Other</option>\r\n          </MySelect>\r\n          <MyCheckbox name=\"acceptedTerms\">\r\n            I accept the terms and conditions\r\n          </MyCheckbox>\r\n\r\n          <button type=\"submit\">Submit</button>\r\n        </Form>\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IMANewSaleForm;"]},"metadata":{},"sourceType":"module"}