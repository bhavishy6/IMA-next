{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectDestructuringEmpty from \"@babel/runtime-corejs2/helpers/esm/objectDestructuringEmpty\";\nvar _jsxFileName = \"C:\\\\Users\\\\bhavi\\\\Documents\\\\Coding\\\\IMA-next\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport withIMALayout from '../components/IMALayout';\nimport fetch from 'isomorphic-unfetch';\n\nvar moment = require('moment');\n\nmoment().format('L');\n\nvar Dashboard = function Dashboard(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"form to add new sale form to add new customer form to add new inventory item\");\n};\n\nDashboard.getInitialProps = function _callee() {\n  var res, json;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/sales?daysAgo=' + 30));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          json = _context.sent;\n          console.log(\"Show data fetched. \".concat(_JSON$stringify(json)));\n          return _context.abrupt(\"return\", {\n            data: getMostRecentFormattedSales(json)\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nfunction getMostRecentFormattedSales(sales) {\n  var recentSales = {};\n  sales.forEach(function (sale, index) {\n    // console.log(\"11\" + JSON.stringify(sale))\n    console.log(index + \":\" + sale[\"date\"]);\n    var date = moment(sale[\"date\"]).format(\"L\");\n    var quantities = sale[\"quantities\"]; // console.log(JSON.stringify(quantities))\n\n    if (recentSales[date]) {\n      console.log('this date exists' + date);\n      recentSales[date].forEach(function (product, index) {\n        // console.log(\"existing product name for this day: \" + product['name'])\n        var sameProduct = findProductInQuantities(product[\"name\"], quantities);\n        console.log(_JSON$stringify(sameProduct));\n\n        if (sameProduct === null) {} else {\n          console.log(\"found same product: \" + _JSON$stringify(product) + product['qty'] + \"+\\n \" + _JSON$stringify(sameProduct)); // product[\"qty\"] += sameProduct[\"qty\"]\n        }\n      }, recentSales[date]);\n    } else {\n      //this date does not yet exist in recentSales\n      recentSales[date] = sale[\"quantities\"];\n    }\n  });\n  console.log(\"map:  \" + _JSON$stringify(recentSales));\n  return sales;\n}\n\n;\n\nfunction findProductInQuantities(name, quantities) {\n  return quantities.forEach(function (product, index) {\n    console.log(name + \"checking product name: \" + product['name']);\n\n    if (name == product['name']) {\n      console.log('true' + _JSON$stringify(product));\n      return product;\n    }\n  });\n}\n\nexport default withIMALayout(Dashboard);","map":{"version":3,"sources":["C:/Users/bhavi/Documents/Coding/IMA-next/pages/index.js"],"names":["withIMALayout","fetch","moment","require","format","Dashboard","getInitialProps","res","json","console","log","data","getMostRecentFormattedSales","sales","recentSales","forEach","sale","index","date","quantities","product","sameProduct","findProductInQuantities","name"],"mappings":"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","sourcesContent":["import withIMALayout from '../components/IMALayout'\r\nimport fetch from 'isomorphic-unfetch'\r\nvar moment = require('moment')\r\nmoment().format('L');\r\n\r\nconst Dashboard = ({ }) => {\r\n\r\n    return (\r\n        <div>\r\n            form to add new sale\r\n            form to add new customer\r\n            form to add new inventory item\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nDashboard.getInitialProps = async () => {\r\n    const res = await fetch('http://localhost:3000/api/sales?daysAgo=' + 30)\r\n    const json = await res.json()\r\n    console.log(`Show data fetched. ${JSON.stringify(json)}`);\r\n    return { data: getMostRecentFormattedSales(json) };\r\n}\r\n\r\nfunction getMostRecentFormattedSales(sales) {\r\n    var recentSales = {}\r\n    sales.forEach((sale, index) => {\r\n        // console.log(\"11\" + JSON.stringify(sale))\r\n        console.log(index + \":\" + sale[\"date\"])\r\n        var date = moment(sale[\"date\"]).format(\"L\")\r\n        var quantities = sale[\"quantities\"]\r\n        // console.log(JSON.stringify(quantities))\r\n        if (recentSales[date]) {\r\n            console.log('this date exists' + date)\r\n            recentSales[date].forEach((product, index) => {\r\n                // console.log(\"existing product name for this day: \" + product['name'])\r\n                var sameProduct = findProductInQuantities(product[\"name\"], quantities)\r\n                console.log(JSON.stringify(sameProduct))\r\n                if (sameProduct === null) {\r\n                    \r\n                } else {\r\n                    console.log(\"found same product: \" + JSON.stringify(product) + product['qty'] +\"+\\n \" + JSON.stringify(sameProduct))\r\n                    // product[\"qty\"] += sameProduct[\"qty\"]\r\n                }\r\n            }, recentSales[date])\r\n        } else {\r\n            //this date does not yet exist in recentSales\r\n            recentSales[date] = sale[\"quantities\"]\r\n        }\r\n    })\r\n    console.log(\"map:  \" + JSON.stringify(recentSales))\r\n    return sales;\r\n};\r\n\r\nfunction findProductInQuantities(name, quantities) {\r\n   return quantities.forEach((product, index) => {\r\n        console.log(name + \"checking product name: \" + product['name'])\r\n        if (name == product['name']) {\r\n            console.log('true' + JSON.stringify(product))\r\n            return product;\r\n        }\r\n    });\r\n}\r\n\r\nexport default withIMALayout(Dashboard);"]},"metadata":{},"sourceType":"module"}